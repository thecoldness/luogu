#include<cstdio>
#include<cstring>
#include<cctype>
#include<algorithm>
using namespace std;
#define int long long
inline int read()
{
	int res = 0;
	char c;
	bool flag = true;
	c = getchar();
	while(!isdigit(c))
	{
		if(c == '-')	flag = false;
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return flag ? res : -res;
}
const int Max_q = 1e5 + 5;
struct node{
	int l , r , val , tag;
}tree[Max_q << 2];
struct Node{
	int val , end;
}opt[Max_q];
int t , q , mod , type , m;
inline void build(int ll , int rr , int tr)
{
	tree[tr].l = ll , tree[tr].r = rr , tree[tr].val = 1 , tree[tr].tag = 1;
	if(ll == rr)	return;
	int mid = (ll + rr) >> 1;
	build(ll , mid , tr * 2);
	build(mid + 1 , rr , tr * 2 + 1);
}
inline void push_down(int tr)
{
	if(tree[tr].tag == 1)	return;
	tree[tr * 2].tag *= tree[tr].tag , tree[tr * 2].val *= tree[tr].tag;
	tree[tr * 2 + 1].tag *= tree[tr].tag , tree[tr * 2 + 1].val *= tree[tr].tag;
	tree[tr * 2].tag %= mod , tree[tr * 2 + 1].tag %= mod;
	tree[tr * 2].val %= mod , tree[tr * 2 + 1].val %= mod;
	tree[tr].tag = 1;
}
inline void change(int l , int r , int tr , int val)
{
	int ll = tree[tr].l , rr = tree[tr].r;
	if(ll > r || rr < l)	return;
	if(l <= ll && rr <= r)
	{
		tree[tr].tag *= val , tree[tr].val *= val;
		tree[tr].tag %= mod , tree[tr].val %= mod;
		return;
	}
	push_down(tr);
	change(l , r , tr * 2 , val);
	change(l , r , tr * 2 + 1 , val);
}
inline int query(int pos , int tr)
{
	int ll = tree[tr].l , rr = tree[tr].r;
	if(ll > pos || rr < pos)	return 1;
	if(ll == rr)	return tree[tr].val;
	push_down(tr);
	return query(pos , tr * 2) * query(pos , tr * 2 + 1) % mod;
}
signed main()
{
	t = read();
	while(t --)
	{
		q = read() , mod = read();
		memset(opt , 0 , sizeof(opt));
		build(1 , q , 1);
		for(int i = 1 ; i <= q ; ++ i)
		{
			type = read() , m = read();
			if(type == 1)	opt[i].val = m;
			else 
			{
				opt[m].end = i - 1;
				change(m , i - 1 , 1 , opt[m].val);
			}
		}
		for(int i = 1 ; i <= q ; ++ i)
		{
			if(!opt[i].val)	continue;
			if(opt[i].end == 0)	change(i , q , 1 , opt[i].val);
		}
		for(int i = 1 ; i <= q ; ++ i)
			printf("%lld\n" , query(i , 1));
	}
	return 0;
}
