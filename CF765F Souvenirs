#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
#include <vector>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline ll read()
	{
		ll res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}

	const int Max_n = 1e5 + 5;
	const ll INF = 1e18;
	const int Max_q = 3e5 + 5;
	const int Max_siz = 1e7 + 5;

	struct node
	{
		int li , ri;
		node(int a , int b)
		{
			li = a , ri = b;
		}
		node(){}
	}ask[Max_q];

	vector<int> v[Max_n];

	int q , n , son[Max_siz][2] , val[Max_siz] , root;
	int tot;

	ll ans[Max_q] , a[Max_n];

	ll BIT[Max_n];

	inline int lowbit(const int x)
	{
		return x & -x;
	}

	inline void add(const int pos , const ll val)
	{
		for(int i = pos ; i <= n ; i += lowbit(i))
			BIT[i] = min(BIT[i] , val);
	}

	inline ll query(const int pos)
	{
		ll ret = INF;
		for(int i = pos ; i ; i -= lowbit(i))
			ret = min(ret , BIT[i]);
		return ret;
	}

	void change(const ll l , const ll r , const ll pos , int &tr , const int va)
	{
		if(!tr)
			tr = ++ tot;
		val[tr] = va;
		if(l == r)
			return;
		ll mid = (l + r) >> 1;
		if(mid >= pos)
			change(l , mid , pos , son[tr][0] , va);
		else change(mid + 1 , r , pos , son[tr][1] , va);
	}

	int query(const ll ql , const ll qr , const ll l , const ll r , const int tr)
	{
		if(!tr)	return 0;
		if(l > qr || ql > r)
			return 0;
		if(l <= ql && qr <= r)
			return val[tr];
		ll mid = (ql + qr) >> 1;
		return max(query(ql , mid , l , r , son[tr][0]) , query(mid + 1 , qr , l , r , son[tr][1]));
	}

	inline void main()
	{
		n = read();
		for(int i = 1 ; i <= n ; ++ i)
			a[i] = read();
		q = read();
		change(1 , INF , a[1] , root , 1);
		for(int i = 1 ; i <= q ; ++ i)
		{
			int ui = read() , vi = read();
			ask[i] = node(ui , vi);
			v[vi].push_back(i);
		}
		for(int i = 0 ; i <= n ; ++ i)
			BIT[i] = INF;
		for(int i = 2 ; i <= n ; ++ i)
		{
			ll now = INF , pos = INF;
			while(now >= a[i])
			{
				pos = query(1 , INF , a[i] , now , root);
				if(pos == 0)	break;
				add(n - pos + 1 , a[pos] - a[i]);
				now = (a[pos] + a[i] + 1) / 2 - 1;
			}
			now = 0;
			while(now <= a[i])
			{
				pos = query(1 , INF , now , a[i] , root);
				if(pos == 0)	break;
				add(n - pos + 1 , a[i] - a[pos]);
				now = (a[pos] + a[i]) / 2 + 1;
			}
			int sz = v[i].size();
			for(int j = 0 ; j < sz ; ++ j)
			{
				int li = ask[v[i][j]].li;
				ans[v[i][j]] = query(n - li + 1);
			}
			change(1 , INF , a[i] , root , i);
		}
		for(int i = 1 ; i <= q ; ++ i)
			printf("%lld\n" , ans[i]);
	}
}

int main()
{
	// freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
