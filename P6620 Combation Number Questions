#include <cstdio>
#include <cctype>
#include <algorithm>
#include <cstring>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline int read()
	{
		int res = 0 ; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}

	const int Max_m = 1e3 + 5;

	int s[Max_m][Max_m] , n , x , jzp , m , a[Max_m] , ans;
	int b[Max_m];

	inline int quickpow(ll x , ll y)
	{
		ll ret = 1;
		while(y)
		{
			if(y & 1) ret = ret * x % jzp;
			x = x * x % jzp , y >>= 1;
		}
		return ret;
	}

	inline int add(const int x , const int y)
	{
		int ret = x + y;
		if(ret >= jzp) ret -= jzp;
		return ret;
	}

	inline void main()
	{
		n = read() , x = read() , jzp = read() , m = read();
		for(int i = 0 ; i <= m ; ++ i) a[i] = read();
		s[0][0] = 1 , b[0] = 1;
		for(int i = 1; i <= m ; ++ i) b[i] = 1ll * b[i - 1] * (n - i + 1) % jzp;
		for(int i = 1 ; i <= m ; ++ i)
			for(int j = 1 ; j <= i ; ++ j) s[i][j] = add(s[i - 1][j - 1] , 1ll * j * s[i - 1][j] % jzp);
		for(int i = 0 ; i <= m ; ++ i)
			for(int j = 0 ; j <= i ; ++ j)
				ans = add(ans , 1ll * b[j] * s[i][j] % jzp * a[i] % jzp * quickpow(x , j) % jzp * quickpow(x + 1 , n - j) % jzp);
		printf("%d\n" , ans);
	}
}

int main()
{
	thecold::main();
	return 0;
}
