#include<cstdio>
#include<cctype>
#include<cmath>
#include<algorithm>
using namespace std;
#define double long double
inline int read()
{
	int res = 0;
	char c;
	bool flag = true;
	c = getchar();
	while(!isdigit(c))
	{
		if(c == '-')	flag = false;
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return flag ? res : -res;
}
const double eps = 1e-6;
double ax , ay , bx , by , cx , cy , dx , dy , p , q , r;
double ans;
inline double cacl(double posx , double posy)
{
	double lx = cx , rx = dx , ly = cy , ry = dy , ans;
	do
	{
		double lenx = (rx - lx) / 3.0 , leny = (ry - ly) / 3.0;
		double lmidx = lx + lenx , rmidx = lx + 2 * lenx , lmidy = ly + leny , rmidy = ly + 2 * leny;
		double timl = hypot(lmidx - dx , lmidy - dy) / q + hypot(lmidx - posx , lmidy - posy) / r;
		double timr = hypot(rmidx - dx , rmidy - dy) / q + hypot(rmidx - posx , rmidy - posy) / r;
		if(timl < timr)	ans = timl , rx = rmidx , ry = rmidy;
		else ans = timr , lx = lmidx , ly = lmidy;
	}while(fabs(rx - lx) >= eps || fabs(ry - ly) >= eps);
	return ans + hypot(posx - ax , posy - ay) / p;
}
int main()
{
	ax = read() , ay = read() , bx = read() , by = read();
	cx = read() , cy = read() , dx = read() , dy = read();
	p = read() , q = read() , r = read();
	double lx = ax , rx = bx , ly = ay , ry = by;
	do
	{
		double lenx = (rx - lx) / 3.0 , leny = (ry - ly) / 3.0;
		double lmidx = lx + lenx , rmidx = lx + 2 * lenx , lmidy = ly + leny , rmidy = ly + leny * 2;
		double lc = cacl(lmidx , lmidy) , rc = cacl(rmidx , rmidy);
		if(lc < rc)	ans = lc , rx = rmidx , ry = rmidy;
		else ans = rc , lx = lmidx , ly = lmidy;
	}while(fabs(rx - lx) >= eps || fabs(ry - ly) >= eps);
	printf("%.2Lf" , ans);
	return 0;
}
