#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
#include <queue>
using namespace std;

inline int read()
{
	int res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}

const int Max_n = 1e5 + 5;
const int Max_m = 2e6 + 5;

struct node
{
	int nex , to;
	node(int a , int b)
	{
		nex = a , to = b;
	}
	node() {}
} edge[Max_m * 2];

int cnt , siz[Max_n] , nex[Max_n] , n , m , tot , head[Max_n] , pre[Max_n];
int st[Max_n] , tp;

inline void add_edge(int x , int y)
{
	edge[ ++ tot] = node(head[x] , y) , head[x] = tot;
	edge[ ++ tot] = node(head[y] , x) , head[y] = tot;
}

bool vis[Max_n] , tmp[Max_n];

inline void del(const int x)
{
	vis[x] = true;
	nex[pre[x]] = nex[x] , pre[nex[x]] = pre[x];
}

inline int find(int x)
{
	while((nex[x] != x + 1) && (nex[x]))
		x = nex[x];
	return x;
}

queue<int> q;

int main()
{
	// freopen("data.in" , "r" , stdin);
	n = read() , m = read();
	for(int i = 1 ; i <= m ; ++ i)
		add_edge(read() , read());
	for(int i = 0 ; i < n ; ++ i)
		nex[i] = i + 1;
	for(int i = 1 ; i <= n ; ++ i)
		pre[i] = i - 1;
	while(find(nex[0]))
	{
		++ cnt;
		q.push(find(nex[0]));
		while(!q.empty())
		{
			int now = q.front();
			q.pop();
			vis[now] = true , del(now);
			for(int i = head[now] ; i ; i = edge[i].nex)
				tmp[edge[i].to] = true;
			for(int i = nex[0] ; i ; i = nex[i])
			{
				if(vis[i] || tmp[i])	continue;
				vis[i] = true , ++ siz[cnt] , del(i);
				q.push(i);
			}
			for(int i = head[now] ; i ; i = edge[i].nex)
				tmp[edge[i].to] = false;
		}
	}
	sort(siz + 1 , siz + cnt + 1);
	printf("%d\n" , cnt);
	for(int i = 1 ; i <= cnt ; ++ i)
		printf("%d " , siz[i] + 1);
	return 0;
}
