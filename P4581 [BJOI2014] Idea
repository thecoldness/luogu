#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
#include <chrono>
#include <random>
#include <queue>
using namespace std;

namespace thecold
{
	inline int read()
	{
		int res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}

	const int Max_n = 1e6 + 5;

	mt19937 rnd;

	inline int getr(const int l , const int r)
	{
		uniform_int_distribution<int> dis(l , r);
		return dis(rnd);
	}

	int n , m , ans[Max_n] , val[Max_n] , head[Max_n];
	int tot , a[Max_n] , b[Max_n];

	inline void topu()
	{
		for(int i = 1 ; i <= m ; ++ i) val[i] = getr(0 , n + m);
		for(int i = m + 1 ; i <= n ; ++ i) val[i] = min(val[a[i]] , val[b[i]]);
	}

	inline void main()
	{
		rnd.seed(std::chrono::steady_clock::now().time_since_epoch().count());
		n = read() , m = read();
		for(int i = m + 1 ; i <= n ; ++ i)	a[i] = read() , b[i] = read();
		for(int i = 1 ; i <= 100 ; ++ i)
		{
			topu(); 
			for(int j = m + 1 ; j <= n ; ++ j) ans[j] += val[j];
		}
		for(int i = m + 1 ; i <= n ; ++ i)	printf("%d\n" , (int)((double)(n + m) / ((double)ans[i] / 100) - 0.5));
	}
}

int main()
{
	thecold::main();
	return 0;
}
