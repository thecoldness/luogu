#include <cstdio>
#include <cctype>
#include <algorithm>
#include <cstring>
#include <vector>
using namespace std;
/*
namespace thecold
{
	inline int read()
	{
		int res = 0; bool flag= false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}*/

	const int Max_n = 1e3 + 5;

	typedef vector<vector<int> > vec;

	int n , fa[Max_n] , bel[Max_n] , siz[Max_n] , bel2[Max_n] , gt;

	vec v , ans;

	vector<int> son[Max_n] , son2[Max_n];

	void build(std::vector<std::vector<int> > b);

	int find(const int x)
	{
		return fa[x] == x ? x : fa[x] = find(fa[x]);
	}

	inline void merge(int x , int y)
	{
		if(find(x) == find(y)) return;
		int szx = siz[find(x)]; fa[find(x)] = find(y) , siz[find(y)] += szx;
	}

	int construct(std::vector<std::vector<int> > p)
	{
		n = p.size() , ans.resize(n);
		for(int i = 0 ; i < n ; ++ i) fa[i] = i , ans[i].resize(n);
		for(int i = 0 ; i < n ; ++ i)
			for(int j = 0 ; j < n ; ++ j)
				if(p[i][j] == 1) merge(i , j);
				else if(p[i][j] == 3) return gt = 0;
		for(int i = 0 ; i < n ; ++ i) bel[i] = find(i) , son[bel[i]].push_back(i);
		for(int i = 0 ; i < n ; ++ i)
		{
			int sz = son[i].size();
			for(int j = 0 ; j < sz ; ++ j)
				for(int k = j + 1 ; k < sz ; ++ k) if(p[son[i][j]][son[i][k]] != 1) return gt = 0;
		}
		for(int i = 0 ; i < n ; ++ i) siz[i] = bel[i] == i;
		for(int i = 0 ; i < n ; ++ i)
			for(int j = 0 ; j < n ; ++ j)
				if(p[i][j] == 2) merge(i , j);
		for(int i = 0 ; i < n ; ++ i)
		{
			bel2[i] = find(i);
			if(bel[i] == i) son2[find(i)].push_back(i);
		}
		for(int i = 0 ; i < n ; ++ i) if(siz[find(i)] == 2) return gt = 0;
		for(int i = 0 ; i < n ; ++ i)
		{
			int sz = son2[i].size();
			for(int j = 0 ; j < sz ; ++ j)
				for(int k = j + 1 ; k < sz ; ++ k)
				{
					int now1 = son2[i][j] , now2 = son2[i][k] , sz1 = son[now1].size() , sz2 = son[now2].size();
					for(int l = 0 ; l < sz1 ; ++ l)
						for(int m = 0 ; m < sz2 ; ++ m) if(p[son[now1][l]][son[now2][m]] != 2) return gt = 0;
				}
		}
		for(int i = 0 ; i < n ; ++ i) if(bel[i] != i) ans[i][bel[i]] = ans[bel[i]][i] = 1;
		for(int i = 0 ; i < n ; ++ i)
		{
			int sz = son2[i].size();
			for(int j = 1 ; j < sz ; ++ j) ans[son2[i][j - 1]][son2[i][j]] = ans[son2[i][j]][son2[i][j - 1]] = 1;
			if(sz > 2) ans[son2[i][0]][son2[i][sz - 1]] = ans[son2[i][sz - 1]][son2[i][0]] = 1;
		}
		build(ans);
		return gt = 1;
	}
/*	inline void build(vec p)
	{
		for(int i = 0 ; i < n ; ++ i)
		{
			for(int j = 0 ; j < n ; ++ j) printf("%d " , ans[i][j]);
			puts("");
		}
	}

	inline void main()
	{
		n = read() , v.resize(n);
		for(int i = 0 ; i < n ; ++ i)
			for(int j = 0 ; j < n ; ++ j) v[i].push_back(read());
		construct(v); if(gt == 1) build(ans);
	}
}

int main()
{
	thecold::main();
	return 0;
}*/
/*
4
1 1 2 2
1 1 2 2
2 2 1 2
2 2 2 1
*/
