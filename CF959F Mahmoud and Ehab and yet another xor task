#include <cstdio>
#include <algorithm>
#include <cctype>
#include <cstring>
using namespace std;
typedef long long ll;
inline int read()
{
	int res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}
const int Max_n = 25;
const int Max_q = 1e5 + 5;
int p[Max_n] , l , x , n , q , a[Max_q] , tot = 1 , ans[Max_q] , cnt;
inline void ins(int x)
{
	for(int i = 20 ; i >= 0 ; -- i)
	{
		if((x & (1 << i)) == 0)	continue;
		if(!p[i])
		{
			p[i] = x , ++ cnt;
			return;
		}
		x ^= p[i];
	}
}
struct node
{
	int li , xi , id;
	node(int a , int b , int c)
	{
		li = a , xi = b , id = c;
	}
	node() {}
} query[Max_q];
inline bool cmp(node a , node b)
{
	return a.li < b.li;
}
inline bool check(int x)
{
	for(int i = 20 ; i >= 0 ; -- i)
	{
		if((x & (1 << i)) == 0)	continue;
		if(!p[i])	return true;
		x ^= p[i];
	}
	return false;
}
const int MOD = 1e9 + 7;
inline int quickpow(ll x , int y)
{
	ll ret = 1;
	while(y)
	{
		if(y & 1) ret *= x , ret %= MOD;
		x *= x , x %= MOD;
		y >>= 1;
	}
	return ret;
}
int main()
{
	// freopen("data.in" , "r" , stdin);
	n = read() , q = read();
	for(int i = 1 ; i <= n ; ++ i)
		a[i] = read();
	for(int i = 1 ; i <= q ; ++ i)
	{
		int ui = read() , vi = read();
		query[i] = node(ui , vi , i);
	}
	sort(query + 1 , query + q + 1 , cmp);
	for(int i = 1 ; i <= n ; ++ i)
	{
		ins(a[i]);
		while(query[tot].li <= i && tot <= q)
		{
			if(check(query[tot].xi))	ans[query[tot].id] = 0;
			else ans[query[tot].id] = quickpow(2 , i - cnt);
			++ tot;
		}
	}
	for(int i = 1 ; i <= q ; ++ i)
		printf("%d\n" , ans[i]);
	return 0;
}
