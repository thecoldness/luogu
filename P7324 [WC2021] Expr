#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cctype>
#include <cassert>
using namespace std;

namespace thecold
{
	inline int read()
	{
		int res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}

	const int Max_n = 5e4 + 5;
	const int Max_m = 1030;
	const int Max_d = 12; const int jzp = 1e9 + 7;

	int a[Max_d][Max_n] , n , m , st[Max_n] , tp , len;
	int ri[Max_n] , ans[Max_m] , s[Max_n][2] , val;

	char c[Max_n];

	inline int add(const int x , const int y)
	{
		int ret = x + y;
		if(ret >= jzp) ret -= jzp;
		return ret;
	}

	void dfs(const int l , const int r , const int w , const int beg)
	{
		if(l > r) return;
		if(l == beg)
		{
			if(c[l] == '(') 
			{
				int tmpl = l , tmpr = ri[l];
				// dfs(l + 1 , ri[l] - 1 , w , l + 1); bug
				// while(c[tmpl] == '(' && c[tmpr] == ')') ++ tmpl , -- tmpr; bug
				while(ri[tmpl] == tmpr) ++ tmpl , -- tmpr;
				// dfs(tmpl , ri[tmpr] , w , tmpl); bug
				dfs(tmpl , ri[tmpl - 1] - 1 , w , tmpl);
			}
			else {int bel = c[l] - '0'; s[w][(val >> bel) & 1] = 1;}
		}
		if(l == r) return;
		int now = l , tmp0 = 0 , tmp1 = 0; if(c[l] == '(') now = ri[l];
		if(c[now + 2] == '(')
		{
			// dfs(now + 3 , ri[now + 2] - 1 , now + 3 , now + 3); bug
			int tmpl = now + 2 , tmpr = ri[now + 2];
			// while(tmpl == '(' && tmpr == ')') ++ tmpl , -- tmpr; bug
			while(ri[tmpl] == tmpr) ++ tmpl , -- tmpr;
			// dfs(tmpl , ri[tmpr] , now + 3 , tmpl); bug
			dfs(tmpl , ri[tmpl - 1] - 1 , now + 3 , tmpl);
			if(c[now + 1] != '<')
				tmp0 = add(tmp0 , 1ll * s[w][0] * s[now + 3][0] % jzp) , tmp1 = add(tmp1 , add(1ll * s[w][1] * add(s[now + 3][0] , s[now + 3][1]) % jzp , 1ll * s[w][0] * s[now + 3][1] % jzp));
			if(c[now + 1] != '>')
				tmp1 = add(tmp1 , 1ll * s[w][1] * s[now + 3][1] % jzp) , tmp0 = add(tmp0 , add(1ll * s[w][0] * add(s[now + 3][0] , s[now + 3][1]) % jzp , 1ll * s[w][1] * s[now + 3][0] % jzp));
			s[w][0] = tmp0 , s[w][1] = tmp1; dfs(ri[now + 2] , r , w , beg);
		}
		else
		{
			int bel = c[now + 2] - '0' , va = (val >> bel) & 1; // bug s[bel][(val >> bel) & 1] = 1;
			s[now + 2][va] = 1 , s[now + 2][va ^ 1] = 0;
			if(c[now + 1] != '<')
				tmp0 = add(tmp0 , 1ll * s[w][0] * s[now + 2][0] % jzp) , tmp1 = add(tmp1 , add(1ll * s[w][1] * add(s[now + 2][0] , s[now + 2][1]) % jzp , 1ll * s[w][0] * s[now + 2][1] % jzp));
			if(c[now + 1] != '>')
				tmp1 = add(tmp1 , 1ll * s[w][1] * s[now + 2][1] % jzp) , tmp0 = add(tmp0 , add(1ll * s[w][0] * add(s[now + 2][0] , s[now + 2][1]) % jzp , 1ll * s[w][1] * s[now + 2][0] % jzp));
			s[w][0] = tmp0 , s[w][1] = tmp1; dfs(now + 2 , r , w , beg);
		}
	}

	struct node
	{
		int val , pos;
		node(int a , int b)
		{
			val = a , pos = b;
		}
		node(){}
	}sot[15];

	inline bool cmp(node a , node b)
	{
		return a.val < b.val;
	}

	inline void main()
	{
		n = read() , m = read();
		for(int i = 0 ; i < m ; ++ i)
			for(int j = 1 ; j <= n ; ++ j) a[i][j] = read();
		scanf("%s" , c + 1) , len = strlen(c + 1);
		for(int i = 1 ; i <= len ; ++ i)
		{
			if(c[i] == '(') st[ ++ tp] = i;
			if(c[i] == ')') ri[st[tp]] = i , -- tp;
		}
		for(int i = 0 ; i < 1 << m ; ++ i)
		{
			val = i; memset(s , 0 , sizeof(s));
			dfs(1 , len , 1 , 1) , ans[i] = s[1][1];
		}
		// for(int i = 0 ; i < 1 << m ; ++ i) printf("%d %d\n" , i , ans[i][1]);
		int ret = 0;
		for(int i = 1 ; i <= n ; ++ i)
		{
			for(int j = 0 ; j < m ; ++ j) sot[j] = node(a[j][i] , j);
			int S = (1 << m) - 1; sort(sot , sot + m , cmp);
			for(int j = 0 ; j < m ; ++ j)
			{
				int now = sot[j].pos , va = sot[j].val , lst = S ^ (1 << now);
				assert(S & (1 << now));// , assert(sot[j].val != sot[j - 1].val);
				ret = add(ret , 1ll * add(ans[S] , jzp - ans[lst]) * va % jzp) , S = lst;
			}
		}
		printf("%d\n" , ret);
	}
}

int main()
{
	// freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
/*
2 2
3 1 
3 3 
0<0<0<0<1>1
ans = 6

2 2
2 1 
2 1 
0>((1))?0
ans = 6

2 3
3 1
2 2
2 3
1>2?0
ans = 9

2 3
4 3
2 3
2 5
((1<0)<(2>1))<(2>0)
ans = 5

2 3
4 3
2 3
2 5
((1?0)>(2>1))?(2?0)
ans = 60
*/
