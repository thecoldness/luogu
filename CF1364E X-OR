#include <cstdio>
#include <cctype>
#include <algorithm>
#include <cstring>
#include <random>
#include <chrono>
#include <iostream>
using namespace std;

namespace thecold
{
	inline int read()
	{
		int res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}

	const int Max_n = 2050;

	int n , pos[15] , ans[Max_n][Max_n] , cnt , hav;
	int val[Max_n] , pos0;

	bool vis[Max_n][Max_n] , ali[Max_n];

	mt19937 rnd;

	inline int getr(const int l , const int r)
	{
		uniform_int_distribution<int> dis(l , r);
		return dis(rnd);
	}

	inline int query(const int x , const int y)
	{
		if(vis[x][y]) return ans[x][y];
		printf("? %d %d\n" , x , y); vis[x][y] = vis[y][x] = true;
		fflush(stdout); return ans[x][y] = ans[y][x] = read();
	}

	inline void write()
	{
		// printf("! "); bug
		for(int i = 1 ; i <= n ; ++ i)
			if(i == pos0) val[i] = 0;
			else val[i] = query(pos0 , i);
		printf("! ");
		for(int i = 1 ; i <= n ; ++ i) printf("%d " , val[i]);
		exit(0);
	}

	inline void get_val(const int x)
	{
		for(int i = 0 ; i <= cnt ; ++ i)
			// if(query(x , pos[i]) & (1 << i)) val[x] |= 1 << i; bug
			if(pos[i] != x && query(x , pos[i]) & (1 << i)) val[x] |= 1 << i;
		if(val[x] == 0) return pos0 = x , write();
	}

	inline void main()
	{
		rnd.seed(std::chrono::steady_clock::now().time_since_epoch().count());
		n = read(); for(int i = 1 ; i <= 12 ; ++ i) if((1 << i) > n) {cnt = i - 1; break;}
		hav = cnt + 1; int lst = 1;
		for(int i = 1 ; i <= n ; ++ i) vis[i][i] = true; 
		while(hav)
		{
			int x = getr(1 , n) , y = getr(1 , n);
			while(vis[x][y]) x = getr(1 , n) , y = getr(1 , n);
			ans[x][y] = ans[y][x] = query(x , y);
			for(int i = 0 ; i <= cnt ; ++ i) if(!pos[i] && (!(ans[x][y] & (1 << i)))) pos[i] = x , -- hav;
		}
		for(int i = 0 ; i <= cnt ; ++ i) ali[pos[i]] = true;
		for(int i = 1 ; i <= n ; ++ i) if(!ali[i]) {get_val(lst = i); break;}
		for(int i = 1 ; i <= n ; ++ i)
		{
			if(i == lst) continue;
			int ret = query(lst , i);
			if((val[lst] | ret) == val[lst])
				get_val(lst = i);
		}
	}
}

int main()
{
	thecold::main();
	return 0;
}
