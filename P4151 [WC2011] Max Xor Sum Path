#include <cstdio>
#include <cctype>
#include <algorithm>
#include <cstring>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline ll read()
	{
		ll res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}

	const int Max_n = 5e4 + 5;
	const int Max_m = 1e5 + 5;

	int n , m , head[Max_n] , tot;

	ll a[70] , ans , val[Max_n];

	struct node
	{
		int nex , to;ll val;
		node(int a , int b , ll c)
		{
			nex = a , to = b , val = c;
		}
		node(){}
	}edge[Max_m << 1];

	inline void add_edge(const int x , const int y , const ll z)
	{
		edge[ ++ tot] = node(head[x] , y , z) , head[x] = tot;
		edge[ ++ tot] = node(head[y] , x , z) , head[y] = tot;
	}

	bool vis[Max_n];

	inline void insert(ll x)
	{
		for(int i = 63 ; i >= 0 ; -- i)
			if(x & (1ll << i))
			{
				if(!a[i]) {a[i] = x; break;}
				x ^= a[i];
			}
	}

	void dfs_tree(const int now , const int from)
	{
		vis[now] = true;
		for(int i = head[now] ; i ; i = edge[i].nex)
		{
			int nex = edge[i].to;ll va = edge[i].val;
			if(nex == from) continue;
			if(vis[nex]) insert(val[now] ^ val[nex] ^ va);
			else val[nex] = val[now] ^ va , dfs_tree(nex , now);
		}
	}

	inline void main()
	{
		n = read() , m = read();
		for(int i = 1 ; i <= m ; ++ i)
		{
			int ui = read() , vi = read();ll ti = read();
			add_edge(ui , vi , ti);
		}
		dfs_tree(1 , 0); ans = val[n];
		for(int i = 63 ; i >= 0 ; -- i) ans = max(ans , ans ^ a[i]);
		printf("%lld\n" , ans);
	}
}

int main()
{
	thecold::main();
	return 0;
}
