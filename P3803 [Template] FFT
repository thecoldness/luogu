#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
#include <cmath>
using namespace std;

inline int read()
{
	int res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}

const double pi = acos(-1.0);
const int Max_n = 1e6 + 5;

int n , m , sot[Max_n << 2] , len;

struct complex
{
	double r , v;
	complex(const double a , const double b)
	{
		r = a , v = b;
	}
	complex() {}
} f[Max_n << 2] , g[Max_n << 2];

complex operator + (const complex a , const complex b)
{
	return complex(a.r + b.r , a.v + b.v);
}

complex operator - (const complex a , const complex b)
{
	return complex(a.r - b.r , a.v - b.v);
}

complex operator * (const complex a , const complex b)
{
	return complex(a.r * b.r - a.v * b.v , a.r * b.v + a.v * b.r);
}

inline void FFT(complex *a , const int opt)
{
	for(int i = 1 ; i < 1 << len ; ++ i)
		if(i < sot[i])
			swap(a[i] , a[sot[i]]);
	for(int dep = 1 ; dep <= len ; ++ dep)
	{
		complex base = complex(cos(2.0 * pi / (1 << dep)) , opt * sin(2.0 * pi / (1 << dep)));
		complex w = complex(1 , 0);
		for(int i = 0 ; i < 1 << len ; i += 1 << dep)
		{
			w = complex(1 , 0);
			for(int j = 0 ; j < 1 << (dep - 1) ; ++ j)
			{
				complex u = a[i + j] , v = w * a[i + j + (1 << (dep - 1))];
				a[i + j] = u + v;
				a[i + j + (1 << (dep - 1))] = u - v;
				w = w * base;
			}
		}

	}
	if(opt == -1)
		for(int i = 0 ; i < (1 << len) ; ++ i)
			a[i].r /= (1 << len);
}

int main()
{
	n = read() , m = read();
	for(int i = 0 ; i <= n ; ++ i)
		f[i].r = read();
	for(int i = 0 ; i <= m ; ++ i)
		g[i].r = read();
	while((1 << len) <= n + m)
		++ len;
	for(int i = 1 ; i < 1 << len ; ++ i)
		sot[i] = (sot[i >> 1] >> 1) | ((i & 1) << (len - 1));
	FFT(f , 1) , FFT(g , 1);
	for(int i = 0 ; i < 1 << len ; ++ i)
		f[i] = f[i] * g[i];
	FFT(f , -1);
	for(int i = 0 ; i <= n + m ; ++ i)
		printf("%d " , (int)(f[i].r + 0.5));
	return 0;
}
