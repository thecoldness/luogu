#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
using namespace std;

namespace thecold
{
	typedef long long ll;
	
	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}
	
	const int Max_n = 2e5 + 5;
	
	int n , m , fa[Max_n] , type[Max_n];
	
	ll ans;
	
	struct node
	{
		int xi , yi , wi;
		node(int a , int b , int c)
		{
			xi = a , yi = b , wi = c;
		}
		node(){}
	}q[Max_n];
	
	inline bool cmp(node a , node b)
	{
		return a.wi > b.wi;
	}
	
	int find(const int x)
	{
		return fa[x] == x ? x : fa[x] = find(fa[x]);
	}
	
	inline void merge(const int x , const int y)
	{
		fa[find(x)] = find(y);
	}
	
	inline void main()
	{
		n = read() , m = read();
		for(int i = 1 ; i <= m ; ++ i)
		{
			int ui = read() , wi = read() , qi = read();
			q[i] = node(ui , wi , qi);
		}
		sort(q + 1 , q + m + 1 , cmp);
		for(int i = 1 ; i <= n ; ++ i)
			fa[i] = i;
		for(int i = 1 ; i <= m ; ++ i)
		{
			int fx = find(q[i].xi) , fy = find(q[i].yi);
			if(fx == fy)
			{
				if(type[fx] == 1)	continue;
				type[fx] = 1 , ans += q[i].wi;
			}
			else
			{
				if(type[fx] && type[fy])	continue;
//				int tmp = type[fx] & type[fy]; bug
				int tmp = type[fx] | type[fy];
				merge(fx , fy) , type[find(fx)] = tmp;
				ans += q[i].wi;
			}
		}
		printf("%lld\n" , ans);
	}
}

int main()
{
	thecold::main();
	return 0;
}
/*
3 3
2 1 1
2 3 8
2 3 1

ans = 10

5 5
1 5 7
2 5 8
1 3 8
3 1 3
2 4 8

ans = 34

5 5
5 3 9
5 4 6
2 4 10
3 1 4
4 2 1

ans = 30
*/
