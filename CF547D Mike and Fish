#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
using namespace std;

namespace thecold
{
	inline int read()
	{
		int res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}
	
	const int Max_n = 4e5 + 5;
	
	int head[Max_n << 1] , tot = 1 , n , degree[Max_n << 1] , fa[Max_n << 1];
	int base = 2e5 , ans[Max_n << 1];
	
	struct node
	{
		int nex , to , id , val;
		node(int a , int b , int c , int d)
		{
			nex = a , to = b , id = c , val = d;
		}
		node(){}
	}edge[Max_n << 4];
	
	inline int find(const int x)
	{
		return fa[x] ^ x ? fa[x] = find(fa[x]) : x;
	}
	
	inline void merge(const int x , const int y)
	{
		fa[find(x)] = find(y);
	}
	
	inline void add_edge(const int x , const int y , const int id , const int val)
	{
		edge[ ++ tot] = node(head[x] , y , id , val) , head[x] = tot;
		edge[ ++ tot] = node(head[y] , x , id , -val) , head[y] = tot;
	}
	
	bool vis[Max_n << 1];
	
	void dfs_eular(const int now)
	{
		for(int &i = head[now] ; i ; i = edge[i].nex)
		{
			if(vis[i]) continue;
			int nex = edge[i].to , tmp = i;
			vis[i] = vis[i ^ 1] = true;
			dfs_eular(nex);
			if(edge[tmp].id)	ans[edge[tmp].id] = edge[tmp].val;
		}
	}
	
	inline void main()
	{
		n = read();
		for(int i = 1 ; i <= 4e5 ; ++ i)
			fa[i] = i;
		for(int i = 1 ; i <= n ; ++ i)
		{
			int ui = read() , vi = read();
			++ degree[ui] , ++ degree[vi + base];
			add_edge(ui , vi + base , i , 1);
		}
		for(int i = 1 ; i <= base * 2 ; ++ i)
			if(degree[i] % 2) add_edge(i , 0 , 0 , 0) , merge(0 , i);
//		for(int i = 0 ; i <= base ; ++ i) bug
		for(int i = 0 ; i <= base * 2 ; ++ i)
			if(fa[i] == i)	dfs_eular(i);
		for(int i = 1 ; i <= n ; ++ i)
			if(ans[i] == -1) printf("b");
			else printf("r");
	}
}

int main()
{
	thecold::main();
	return 0;
}
