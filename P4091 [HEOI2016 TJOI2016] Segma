#include <cstdio>
#include <cctype>
#include <algorithm>
#include <cstring>
using namespace std;

namespace thecold
{
	typedef long long ll;
	
	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}
	
	const int jzp = 998244353;
	const int G = 3;
	const int Max_n = 1e5 + 5;
	
	ll jc[Max_n] , invjc[Max_n] , f[Max_n << 2] , g[Max_n << 2];
	
	int n , rev[Max_n << 2] , lim , len = 1 , inv3;
	
	inline ll quickpow(ll x , ll y)
	{
		ll ret = 1;
		while(y)
		{
			if(y & 1) ret = ret * x % jzp;
			x = x * x % jzp , y >>= 1; 
		}
		return ret;
	}
	
	inline ll ni(const int x)
	{
		return quickpow(x , jzp - 2);
	}
	
	inline int C(const int n , const int m)
	{
		if(m > n)	return 0;
		return jc[n] * invjc[m] % jzp * invjc[n - m] % jzp;
	}
	
	inline int add(const int x , const int y)
	{
		int ret = x + y;
		if(ret >= jzp)
			ret -= jzp;
		return ret;
	}
	
	inline void NTT(ll *w , const int opt)
	{
		for(int i = 1 ; i < len ; ++ i)
			if(rev[i] > i)	swap(w[i] , w[rev[i]]);
		for(int dep = 1 ; dep <= lim ; ++ dep)
		{
			int base = quickpow((opt == 1 ? 3 : inv3) , (jzp - 1) / (1 << dep));
			for(int i = 0 ; i < len ; i += 1 << dep)
			{
				ll q = 1;
				for(int j = 0 ; j < (1 << (dep - 1)) ; ++ j)
				{
					int ui = w[i + j] , ti = q * w[i + j + (1 << (dep - 1))] % jzp;
					w[i + j] = add(ui , ti) , w[i + j + (1 << (dep - 1))] = (ui - ti + jzp) % jzp;
					q = q * base % jzp;
				}
			}
		}
		int inv = ni(len);
		if(opt == -1)
			for(int i = 0 ; i < len ; ++ i)
				w[i] = w[i] * inv % jzp; 
	}
	
	inline void main()
	{
		n = read();
		inv3 = ni(3);
		jc[0] = 1;
		invjc[0] = 1; // bug
		for(int i = 1 ; i <= n ; ++ i)
			jc[i] = jc[i - 1] * i % jzp , invjc[i] = ni(jc[i]);
		for(int i = 0 ; i <= n ; ++ i)
			if(i % 2)	f[i] = jzp - invjc[i];
			else f[i] = invjc[i];
//		g[0] = g[1] = 1; // bug bug
		g[0] = 1 , g[1] = n + 1;
		for(int i = 2 ; i <= n ; ++ i)
			g[i] = (quickpow(i , n + 1) - 1) * invjc[i] % jzp * ni(i - 1) % jzp;
		while(len < 2 * n)	++ lim , len <<= 1;
		for(int i = 1 ; i < len ; ++ i)
			rev[i] = (rev[i / 2] >> 1) | ((i & 1) << (lim - 1));
		NTT(f , 1) , NTT(g , 1);
		for(int i = 0 ; i < len ; ++ i)
			f[i] = f[i] * g[i] % jzp;
		NTT(f , -1);
		ll ans = 0 , tmp = 1;
		for(int i = 0 ; i <= n ; ++ i)
//			ans = add(ans , f[i] * tmp % jzp) , tmp = 1ll * tmp * i % jzp * 2 % jzp;
			ans = add(ans , f[i] * tmp % jzp) , tmp = 1ll * tmp * (i + 1) % jzp * 2 % jzp; 
		printf("%lld" , ans); 
	}
}

int main()
{
	thecold::main();
	return 0;
}
