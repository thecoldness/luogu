#include<cstdio>
#include<cctype>
#include<algorithm>
#include<stack>
using namespace std;
inline int read()
{
	int res = 0;
	char c;
	bool flag = true;
	c = getchar();
	while(!isdigit(c))
	{
		if(c =='-')	flag = false;
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return flag ? res : -res;
}
const int Max_n = 1e5 + 5;
struct node{
	int a , b , c , id , cnt;
}q[Max_n] , tmp[Max_n] , rein[Max_n];
inline bool cmp(node ax , node bx)
{
	if(ax.a != bx.a)	return ax.a < bx.a;
	if(ax.b != bx.b)	return ax.b < bx.b;
	return ax.c < bx.c;
}
inline int lowbit(int x)
{
	return x & -x;
}
stack<int> st;
int n , k , f[Max_n] , val[Max_n * 2] , ans[Max_n] , top;
inline void add(int pos , int va)
{
	for(int i = pos ; i <= k ; i += lowbit(i))
		val[i] += va;
}
inline int query(int pos)
{
	int ret = 0;
	for(int i = pos ; i ; i -= lowbit(i))
		ret += val[i];
	return ret;
}
inline void cdq(int l , int r)
{
	if(l == r)	return;
	int mid = (l + r) >> 1;
	cdq(l , mid) , cdq(mid + 1 , r);
	int q1 = l , q2 = mid + 1 , tl = l - 1;
	while(q1 <= mid && q2 <= r)
	{
		while(q[q1].b <= q[q2].b && q1 <= mid)
		{
			tmp[ ++ tl] = q[q1];
			st.push(q1);
			add(q[q1].c , q[q1].cnt);
			++ q1;
		}
		while(q[q2].b < q[q1].b && q2 <= r)
		{
			tmp[ ++ tl] = q[q2];
			f[q[q2].id] += query(q[q2].c);
			++ q2;
		}
	}
	while(q1 <= mid)	tmp[ ++ tl] = q[q1 ++];
	while(q2 <= r)	tmp[ ++ tl] = q[q2] , f[q[q2].id] += query(q[q2].c) , ++ q2;
	while(st.size())	add(q[st.top()].c , -q[st.top()].cnt) , st.pop();
	for(int i = l ; i <= r ; ++ i)
		q[i] = tmp[i];
}
int main()
{
	n = read() , k = read();
	for(int i = 1 ; i <= n ; ++ i)
		rein[i].a = read() , rein[i].b = read() , rein[i].c = read() , rein[i].id = i , rein[i].cnt = 1;
	sort(rein + 1 , rein + n + 1 , cmp);
	for(int i = 1 ; i <= n ; ++ i)
	{
		if(rein[i].a == q[top].a && rein[i].b == q[top].b && rein[i].c == q[top].c)
		{
			++ q[top].cnt;
			continue;
		}
		q[ ++ top] = rein[i];
		q[top].id = top;
	}
	cdq(1 , top);
	for(int i = 1 ; i <= top ; ++ i)
		f[q[i].id] += q[i].cnt - 1;
	for(int i = 1 ; i <= top ; ++ i)
		ans[f[q[i].id]] += q[i].cnt;
	for(int i = 0 ; i < n ; ++ i)
		printf("%d\n" , ans[i]);
	return 0;
}
