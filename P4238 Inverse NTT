#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
using namespace std;

namespace thecold
{
	typedef long long ll;
	
	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}
	
	const int Max_n = 4e5 + 5;
	const int jzp = 998244353;
	const int G = 3;
	
	inline int quickpow(ll x , ll y)
	{
		ll ret = 1;
		while(y)
		{
			if(y & 1) ret = ret * x % jzp;
			x = x * x % jzp , y >>= 1;
		}
		return ret;
	}
	
	ll f[Max_n] , g[Max_n] , a[Max_n] , b[Max_n] , n;
	
	int lim , len , rev[Max_n] , inv3;
	
	inline int add(const int x , const int y)
	{
		int ret = x + y;
		if(ret >= jzp)
			ret -= jzp;
		return ret;
	}
	
	inline void NTT(ll *w , const int opt)
	{
		for(int i = 1 ; i < len ; ++ i)
			if(rev[i] > i)	swap(w[i] , w[rev[i]]);
		for(int dep = 1 ; dep <= lim ; ++ dep)
		{
			ll base = quickpow((opt == 1 ? G : inv3) , (jzp - 1) / (1 << dep));
			for(int i = 0 ; i < len ; i += (1 << dep))
			{
				ll q = 1;
				for(int j = 0 ; j < (1 << (dep - 1)) ; ++ j)
				{
					int ui = w[i + j] , ti = q * w[i + j + (1 << (dep - 1))] % jzp;
					w[i + j] = add(ui , ti) , w[i + j + (1 << (dep - 1))] = (ui - ti + jzp) % jzp;
					q = q * base % jzp;
				}
			}
		}
		if(opt == -1)
		{
			int inv = quickpow(len , jzp - 2);
			for(int i = 0 ; i < len ; ++ i)
				w[i] = w[i] * inv % jzp;
		}
	}
	
	void solve(const int mod , ll *a , ll *b)
	{
		if(mod == 1){ b[0] = quickpow(a[0] , jzp - 2); return;}
//		int mid = (mod + 1) / 2 - 1; bug
		int mid = (mod + 1) / 2;
		solve(mid , a , b);
		memcpy(g , b , sizeof(g)) , memcpy(f , a , sizeof(ll) * mod);
		lim = 0 , len = 1;
//		while(len < n + mid - 1)	++ lim , len <<= 1; bug
		while(len < 2 * mod) ++ lim , len <<= 1;
		for(int i = 1 ; i < len ; ++ i)
			rev[i] = (rev[i >> 1] >> 1) | ((i & 1) << (lim - 1));
		NTT(f , 1) , NTT(g , 1);
		for(int i = 0 ; i < len ; ++ i)
			f[i] = g[i] * ((2 - f[i] * g[i] % jzp + jzp) % jzp) % jzp;
		NTT(f , -1);
		for(int i = 0 ; i < mod ; ++ i)
			b[i] = f[i];
	}
	
	inline void main()
	{
		n = read() , inv3 = quickpow(3 , jzp - 2);
		for(int i = 0 ; i < n ; ++ i)
			a[i] = read();
		solve(n , a , b);
		for(int i = 0 ; i < n ; ++ i)
			printf("%lld " , b[i]);
	}
}

int main()
{
	thecold::main();
	return 0;
}
