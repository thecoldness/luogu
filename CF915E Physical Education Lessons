#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
#include <set>
using namespace std;

namespace thecold
{
	inline int read()
	{
		int res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}
	
	struct node
	{
		int l , r;
		mutable int val;
		node(int a , int b , int c)
		{
			l = a , r = b , val = c;
		}
		bool operator < (const node &a) const
		{
			return l < a.l;
		}
	};
	
	set<node> odt;
	
	typedef set<node>::iterator iter;
	
	inline iter split(const int x)
	{
		iter it = odt.lower_bound(node(x , 0 , 0));
		if(it != odt.end() && it->l == x) return it;
		-- it;
		int l = it->l , r = it->r , val = it->val;
		odt.erase(it); odt.insert(node(l , x - 1 , val));
		return odt.insert(node(x , r , val)).first;
	}
	
	int n , m , ans;
	
	inline void change(const int l , const int r , const int val)
	{
		iter rp = split(r + 1) , lp = split(l);
		for(iter it = lp ; it != rp ; ++ it)
			ans -= (it->r  - it->l + 1) * it->val;
		odt.erase(lp , rp); odt.insert(node(l , r , val));
		ans += (r - l + 1) * val;
	}
	
	inline void main()
	{
		ans = n = read() , m = read(); odt.insert(node(1 , n , 1));
		for(int i = 1 ; i <= m ; ++ i)
		{
			int l = read() , r = read() , val = read();
			change(l , r , val - 1);
			printf("%d\n" , ans);
		}
	}
}

int main()
{
	thecold::main();
	return 0;
}
