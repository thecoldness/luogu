#include<cstdio>
#include<cctype>
#include<algorithm>
using namespace std;
inline int read()
{
	int res = 0;
	char c;
	bool flag = true;
	c = getchar();
	while(!isdigit(c))
	{
		if(c == '-')	flag = false;
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return flag ? res : -res;
}
const int Max_n = 2e3 + 5;
struct node{
	int nex , to;
	node(int a , int b)
	{
		nex = a , to = b;
	}
	node(){}
}edge[Max_n * Max_n];
int head[Max_n] , n , tot , tp , st[Max_n] , dfn[Max_n] , tim , low[Max_n] , top;
bool vis[Max_n];
inline void add_edge(int x , int y)
{
	edge[ ++ tot] = node(head[x] , y);
	head[x] = tot;
}
void tarjan(int now)
{
	dfn[now] = low[now] = ++ tim;
	st[ ++ tp] = now;
	vis[now] = true;
	for(int i = head[now] ; i ; i = edge[i].nex)
	{
		int nex = edge[i].to;
		if(!dfn[nex])
		{
			tarjan(nex);
			low[now] = min(low[now] , low[nex]);
		}
		else if(vis[nex])	low[now] = min(low[now] , dfn[nex]);
	}
	if(low[now] == dfn[now])
	{
		++ top;
		while(st[tp] != now)	vis[st[tp]] = false , -- tp;
		vis[now] = false , -- tp;
	}
}
int main()
{
	n = read();
	for(int i = 1 ; i <= n ; ++ i)
		for(int j = 1 ; j <= n ; ++ j)
			if(read())	add_edge(i , j);
	for(int i = 1 ; i <= n ; ++ i)
		if(!dfn[i])	tarjan(i);
	if(top >= 2)	printf("NO");
	else printf("YES");
	return 0;
}
