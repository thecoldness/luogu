#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
#include <queue>
using namespace std;

namespace thecold
{
	typedef long long ll;
	
	inline ll read()
	{
		ll res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}
	
	const int Max_n = 5e5 + 5;
	const int Max_dot = 3e7 + 5;
	
	int n , k , sum[Max_dot] , tot = 1 , son[Max_dot][2];
	
	ll w[Max_n] , ans;
	
	struct God
	{
		int bel , kth;
		ll val;
		God(int a , int b , ll c)
		{
			bel = a , kth = b , val = c;
		}
		God(){}
		bool operator < (const God &a)const
		{
			return val < a.val;
		}
	};
	
	priority_queue<God> zzz;
	
	inline void insert(const ll val)
	{
		int now = 1;
		for(int i = 33 ; i >= 0 ; -- i)
		{
			++ sum[now];
			if(i == 0)	break;
			int ch = (val >> (i - 1)) & 1;
			if(!son[now][ch]) son[now][ch] = ++ tot;
			now = son[now][ch];
		}
	}
	
	ll find(const ll val , const int now , const int dep , const int kth , const ll ret)
	{
		if(!dep)	return ret;	
		if((val >> (dep - 1)) & 1)
		{
			if(sum[son[now][0]] >= kth)
				return find(val , son[now][0] , dep - 1 , kth , ret | (1ll << (dep - 1)));
			else return find(val , son[now][1] , dep - 1 , kth - sum[son[now][0]] , ret);
		}
		else
		{
			if(sum[son[now][1]] >= kth)
				return find(val , son[now][1] , dep - 1 , kth , ret | (1ll << (dep - 1)));
			else return find(val , son[now][0] , dep - 1 , kth - sum[son[now][1]] , ret);
		}
	}
	
	inline void main()
	{
		n = read() , k = read();
		for(int i = 1 ; i <= n ; ++ i)
			w[i] = w[i - 1] ^ read();
		for(int i = 0 ; i <= n ; ++ i)
			insert(w[i]);
		for(int i = 0 ; i <= n ; ++ i)
		{
			ll ret = find(w[i] , 1 , 33 , 1 , 0);
			zzz.push(God(i , 1 , ret));
		}
		for(int i = 1 ; i <= 2 * k ; ++ i)
		{
			int now = zzz.top().bel , kth = zzz.top().kth;
			ll val = zzz.top().val;
			ans += val;zzz.pop();
			if(kth < n)
			{
//				ll ret = find(w[now] , kth + 1 , 33 , 1 , 0);
				ll ret = find(w[now] , 1 , 33 , kth + 1 , 0);
				zzz.push(God(now , kth + 1 , ret));
			}
		}
		printf("%lld\n" , ans / 2);
	}
}

int main()
{
	thecold::main();
	return 0;
}
