#include <cstdio>
#include <algorithm>
#include <cctype>
using namespace std;
typedef long long ll;
inline int read()
{
	int res  =0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}
const int Max_n = 1e5 + 5;
int a[Max_n] , n , k , prime[Max_n] , vis[Max_n] , cnt[Max_n] , maxn , tot;
ll ans;
inline int quickpow(ll x , int y)
{
	ll ret = 1;
	while(y)
	{
		if(y & 1)	ret *= x;
		x *= x;
		y >>= 1;
	}
	return ret;
}
int main()
{
	// freopen("data.in" , "r" , stdin);
	n = read() , k = read();
	for(int i = 1 ; i <= n ; ++ i)
		a[i] = read() , maxn = max(a[i] , maxn);
	for(int i = 2 ; i <= maxn ; ++ i)
	{
		if(!vis[i])
		{
			prime[ ++ tot] = i;
			vis[i] = tot;
		}
		for(int j = 1 ; j <= tot && (ll)prime[j] * i <= maxn ; ++ j)
		{
			vis[i * prime[j]] = j;
			if(i % prime[j] == 0)	break;
		}
	}
	for(int i = 1 ; i <= n ; ++ i)
	{
		int ct = 1;
		ll che = 1;
		while(a[i] != 1)
		{
			int son = vis[a[i]] , tot = 0;
			while(a[i] % prime[son] == 0)
				a[i] /= prime[son] , ++ tot;
			ct *= quickpow(prime[son] , tot % k) , che *= quickpow(prime[son] , (k - (tot % k))% k);
			if(che > (ll)maxn || che < 0)	che = 0;
		}
		ans += cnt[che] , ++ cnt[ct];
	}
	printf("%lld" , ans);
	return 0;
}
