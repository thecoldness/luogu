#include<cstdio>
#include<algorithm>
#include<cctype>
#include<cstring>
using namespace std;
typedef long long ll;
inline int read()
{
	int res = 0;
	char c;
	bool flag = true;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c != '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return flag ? res : -res;
}
void write(int x)
{
	if(x < 0)
	{
		putchar('-');
		x = -x;
	}
	
	if(x > 9)	write(x / 10);
	putchar('0' + x % 10);
}
const int Max_n = 5e3 + 5;
const int MOD = 1e9 + 7;
int n , col[Max_n] , fa[Max_n] , num , cnt;
struct node{
	int x , y;
	node(int a , int b)
	{
		x = a , y = b;
	}
	node(){}
}dot[Max_n];
inline int aabs(int x)
{
	return max(x , -x);
}
inline int mul(node a , node b)
{
	return aabs(a.x - b.x) + aabs(a.y - b.y);
}
bool dfs(int now , int co , int sta)
{
	if(col[now])	return col[now] == co;
	col[now] = co;
	for(int i = 1 ; i <= n ; ++ i)
		if(mul(dot[now] , dot[i]) > sta)	
			if(!dfs(i , co ^ 1 , sta))	return false;
	return true;
}
inline bool check(int x)
{
	for(int i = 1 ; i <= n ; ++ i)
		fa[i] = i;
	memset(col , 0 , sizeof(col));
	for(int i = 1 ; i <= n ; ++ i)
		if(!col[i])
		{
			++ cnt;
			if(!dfs(i , 2 , x))	return false;
		}
	return true;
}
inline int quickpow(ll x , ll y)
{
	ll ret = 1;
	while(y)
	{
		if(y & 1)	ret *= x , ret %= MOD;
		y >>= 1;
		x *= x , x %= MOD;
	}
	return ret;
}
bool vis[Max_n];
signed main()
{
	#ifdef MYDEBUG
	freopen("1.txt" , "r" , stdin);
	#endif
	n = read();
	for(int i = 1 ; i <= n ; ++ i)
	{
		int xi , yi;
		xi = read() , yi = read();
		dot[i] = node(xi , yi);
	}
	int l = 0 , r = 1e4 , ans;
	while(l <= r)
	{
		cnt = 0;
		int mid = (l + r) >> 1;
		if(check(mid))
			num = cnt , ans = mid , r = mid - 1;
		else l = mid + 1;
	}
	write(ans);
	putchar('\n');
	write(quickpow(2 , num));
	return 0;
}
