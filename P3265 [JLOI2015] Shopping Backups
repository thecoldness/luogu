#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline int read()
	{
		int res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c  =getchar();
		return !flag ? res : -res;
	}

	const int Max_n = 505;
	const int jzp = 998244353;

	struct node
	{
		int val , v[Max_n];
		int& operator[] (const int a)
		{
			return v[a];
		}
	}a[Max_n];

	int n , m , cnt , ans , base[Max_n];

	inline bool cmp(node a , node b)
	{
		return a.val < b.val;
	}

	inline int quickpow(ll x , ll y)
	{
		ll ret = 1;
		while(y)
		{
			if(y & 1) ret = ret * x % jzp;
			x = x * x % jzp , y >>= 1;
		}
		return ret;
	}

	inline int add(const int x , const int y)
	{
		int ret = x + y;
		if(ret >= jzp) ret -= jzp;
		return ret;
	}

	inline void ADD(int &x , const int y)
	{
		x += y; if(x >= jzp) x -= jzp;
	}

	inline void main()
	{
		n = read() , m = read();
		for(int i = 1 ; i <= n ; ++ i)
			for(int j = 1 ; j <= m ; ++ j) a[i][j] = read();
		for(int i = 1 ; i <= n ; ++ i) a[i].val = read();
		sort(a + 1 , a + n + 1 , cmp);
		for(int i = 1 ; i <= n ; ++ i)
			for(int j = 1 ; j <= m ; ++ j)
			{
				if(!a[i][j]) continue;
				if(!base[j]) {base[j] = i , ++ cnt , ans += a[i].val; break;}
				int tmp = 1ll * a[i][j] * quickpow(a[base[j]][j] , jzp - 2) % jzp;
				for(int k = j ; k <= m ; ++ k) a[i][k] = add(a[i][k] , jzp - 1ll * a[base[j]][k] * tmp % jzp); 
			}
		printf("%d %d\n" , cnt , ans);
	}
}

int main()
{
	thecold::main();
	return 0;
}
