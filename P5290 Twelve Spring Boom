#include<cstdio>
#include<cctype>
#include<algorithm>
#include<vector>
#include<queue>
#define int long long
using namespace std;
inline int read()
{
	int res = 0;
	char c;
	bool flag = true;
	c = getchar();
	while(!isdigit(c))
	{
		if(c == '-')	flag = false;
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return flag ? res : -res;
}
const int Max_n = 2e5 + 5;
vector<int> v[Max_n];
priority_queue<int> q[Max_n] , tem;
int m[Max_n] , n , bel[Max_n] , tot , ans;
inline void dfs(int now)
{
	int sz = v[now].size();
	for(int i = 0 ; i < sz ; ++ i)
	{
		int nex = v[now][i];
		dfs(nex);
		if(!bel[now])	bel[now] = bel[nex];
		else
		{
			int fa , son;
			if(q[bel[now]].size() < q[bel[nex]].size())	fa = bel[nex] , son = bel[now];
			else fa = bel[now] , son = bel[nex];
			while(q[son].size())
			{
				tem.push(max(q[fa].top() , q[son].top()));
				q[fa].pop() , q[son].pop();
			}
			while(tem.size())
				q[fa].push(tem.top()) , tem.pop();
			bel[now] = fa;
		}
	}
	if(!bel[now])	bel[now] = ++ tot;
	q[bel[now]].push(m[now]);
}
signed main()
{
	n = read();
	for(int i = 1 ; i <= n ; ++ i)
		m[i] = read();
	for(int i = 2 ; i <= n ; ++ i)
		v[read()].push_back(i);
	dfs(1);
	while(q[bel[1]].size())	ans += q[bel[1]].top() , q[bel[1]].pop();
	printf("%lld" , ans);
	return 0;
}
