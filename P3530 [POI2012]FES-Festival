#include <cstdio>
#include <cctype>
#include <algorithm>
#include <cstring>
using namespace std;

inline int read()
{
	int res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}

const int Max_n = 605;
const int Max_m = 1e5 + 5;

int dis[Max_n][Max_n] , n , m1 , m2 , cnt , st[Max_n] , tp , ans[Max_n];
int head[Max_n] , tot , low[Max_n] , dfn[Max_n] , tim , bel[Max_n];

bool vis[Max_n];

struct node
{
	int nex , to;
	node(int a , int b)
	{
		nex = a , to = b;
	}
	node() {}
} edge[Max_m << 1];

inline void add_edge(const int x , const int y)
{
	edge[ ++ tot] = node(head[x] , y);
	head[x] = tot;
}

inline void tarjan(const int now)
{
	dfn[now] = low[now] = ++ tim , st[ ++ tp] = now , vis[now] = true;
	for(int i = head[now] ; i ; i = edge[i].nex)
	{
		int nex = edge[i].to;
		if(!dfn[nex])
			tarjan(nex) , low[now] = min(low[nex] , low[now]);
		else if(vis[nex])
			low[now] = min(low[now] , dfn[nex]);
	}
	if(low[now] == dfn[now])
	{
		++ cnt;
		while(st[tp] != now)
			bel[st[tp]] = cnt , vis[st[tp]] = false , -- tp;
		bel[st[tp]] = cnt , vis[st[tp]] = false , -- tp;
	}
}

int main()
{
	// freopen("data.in" , "r" , stdin);
	n = read() , m1 = read() , m2 = read();
	for(int i = 1 ; i <= n ; ++ i)
		for(int j = 1 ; j <= n ; ++ j)
			dis[i][j] = Max_m;
	for(int i = 1 ; i <= m1 ; ++ i)
	{
		int ui = read() , vi = read();
		dis[ui][vi] = min(dis[ui][vi] , 1) , dis[vi][ui] = min(dis[vi][ui] , -1);
	}
	for(int i = 1 ; i <= m2 ; ++ i)
	{
		int ui = read() , vi = read();
		dis[vi][ui] = min(dis[vi][ui] , 0);
	}
	for(int i = 1 ; i <= n ; ++ i)
		for(int j = 1 ; j <= n ; ++ j)
			if(dis[i][j] <= 1)
				add_edge(i , j);
	for(int i = 1 ; i <= n ; ++ i)
		if(!dfn[i])	tarjan(i);
	for(int i = 1 ; i <= n ; ++ i)
		dis[i][i] = 0;
	for(int k = 1 ; k <= n ; ++ k)
		for(int i = 1 ; i <= n ; ++ i)
			if(bel[i] == bel[k])
				for(int j = 1 ; j <= n ; ++ j)
					if(bel[j] == bel[k])
						dis[i][j] = min(dis[i][j] , dis[i][k] + dis[k][j]);
	for(int i = 1 ; i <= n ; ++ i)
		if(dis[i][i] < 0)
		{
			printf("NIE");
			return 0;
		}
	for(int i = 1 ; i <= n ; ++ i)
		for(int j = 1 ; j <= n ; ++ j)
			if(bel[i] == bel[j] && dis[i][j] != Max_m)
				ans[bel[i]] = max(ans[bel[i]] , dis[i][j]);
	int res = 0;
	for(int i = 1 ; i <= cnt ; ++ i)
		res += ans[i];
	res += cnt;
	printf("%d\n" , res);
	return 0;
}

/*
9 2 1
6 7
5 9
4 9

9


4 3 1
3 4
1 3
4 2
1 3

4
*/
