#include <cstdio>
#include <cctype>
#include <algorithm>
#include <cmath>
#include <chrono>
#include <random>
#include <ctime>
using namespace std;
typedef long long ll;
mt19937 rnd;
inline ll getr(ll l , ll r)
{
	uniform_int_distribution<ll> dis(l , r);
	return dis(rnd);
}
inline ll read()
{
	ll res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}
inline ll gcd(ll a , ll b)
{
	return !b ? a : gcd(b , a % b);
}
inline void write(ll x)
{
	if(x > 9)	write(x / 10);
	putchar('0' + x % 10);
}
ll t , n , maxn;
int prime[10] = {0 , 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19};
inline ll quickpow(ll x , ll y , ll MOD)
{
	__int128 ret = 1 , base = x;
	while(y)
	{
		if(y & 1)	ret = ret * base % MOD;
		base *= base , base %= MOD;
		y >>= 1;
	}
	return ret;
}
inline bool Miller_Rabin(ll x)
{
	if(x == 0 || x == 1)	return false;
	if(x == 2)	return true;
	ll t = x - 1 , k = 0;
	while(!(t & 1))
		t >>= 1 , ++ k;
	for(int i = 1 ; i <= 7 ; ++ i)
	{
		if(x == prime[i])	return true;
		ll a = quickpow(prime[i] , t , x);
		for(int j = 1 ; j <= k ; ++ j)
		{
			ll nex = (__int128)a * a % x;
			if(nex == 1 && a != 1 && a != x - 1)	return false;
			a = nex;
		}
		if(a != 1)	return false;
	}
	return true;
}
inline ll f(ll a , ll b , ll MOD)
{
	return (((__int128) a * a % MOD) + b)% MOD;
}
inline ll Phollard_Rho(ll p)
{
	if(!(p % 2))	return 2;
	if(!(p % 3))	return 3;
	if(!(p % 5))	return 5;
	if(!(p % 7))	return 7;
	if(!(p % 11))	return 11;
	if(!(p % 13))	return 13;
	if(!(p % 17))	return 17;
	if(!(p % 19))	return 19;
	ll c = getr(1 , p);
	ll x = 1 , y = 1;
	ll cnt = 1;
	__int128 ply = 1;
	while(true)
		for(ll k = 1 ; ; k <<= 1 , y = x , ply = 1)
		{
			for(cnt = 1 ; cnt <= k ; ++ cnt)
			{
				x = f(x , c , p);
				ply *= abs(x - y) , ply %= p;
				if(!(cnt % 127))
				{
					ll g = gcd(ply , p);
					if(g > 1)	return g;
				}
			}
			ll g = gcd(ply , p);
			if(g > 1)	return g;
		}
}
inline void find(ll x)
{
	if(x < 2 || x < maxn)	return;
	if(Miller_Rabin(x))
	{
		maxn = max(x , maxn);
		return;
	}
	ll now = x;
	while(now == x)
		now = Phollard_Rho(now);
	while(!(x % now))
		x /= now;
	find(now);
	find(x);
}
int main()
{
	rnd.seed(std::chrono::steady_clock::now().time_since_epoch().count());
	t = read();
	int ck = clock();
	while(t --)
	{
		if(((double)clock() - ck) / CLOCKS_PER_SEC >= 1.9)
		{
			printf("0\n");
			continue;
		}
		n = read();
		maxn = 0;
		find(n);
		if(maxn == n)	puts("Prime");
		else write(maxn) , puts("");
	}
	return 0;
}
