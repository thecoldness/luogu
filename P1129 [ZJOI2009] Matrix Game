#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cctype>
#include <queue>
using namespace std;

namespace thecold
{
	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}
	
	const int Max_n = 405;
	const int INF = 1e7;
	
	int t , n , head[Max_n << 1] , tot;
	
	struct node
	{
		int nex , to , val;
		node(int a , int b , int c)
		{
			nex = a , to = b , val = c;
		}
		node(){}
	}edge[Max_n * Max_n << 1];
	
	inline void add_edge(const int x , const int y , const int z)
	{
		edge[ ++ tot] = node(head[x] , y , z) , head[x] = tot;
		edge[ ++ tot] = node(head[y] , x , 0) , head[y] = tot;
	}
	
	int dis[Max_n << 1] , beg[Max_n];
	
	queue<int> zzz;
	
	inline bool bfs()
	{
		memset(dis , 0x3f , sizeof(dis));
		while(zzz.size())	zzz.pop();
		zzz.push(0); dis[0] = 0;
		beg[0] = head[0];
		while(!zzz.empty())
		{
			int now = zzz.front(); zzz.pop();
			if(now == 2 * n + 1)	return true;
			for(int i = head[now] ; i ; i = edge[i].nex)
			{
				int nex = edge[i].to;
				if(dis[nex] == 0x3f3f3f3f && edge[i].val)
				{
					dis[nex] = dis[now] + 1;
//					beg[now] = head[now];  bug 
					beg[nex] = head[nex];
					zzz.push(nex);
				}
			}
		}
		return false;
	}
	
	int dfs(const int now , int flow)
	{
		if(now == 2 * n + 1)	return flow;
		int ret = 0;
		for(int i = beg[now] ; i ; i = edge[i].nex)
		{
			beg[now] = i;
			int nex = edge[i].to;
			if(dis[nex] != dis[now] + 1 || edge[i].val == 0)	continue;
			int tmp = dfs(nex , min(flow , edge[i].val));
			if(!tmp)	dis[nex] = 0x3f3f3f3f;
			flow -= tmp , ret += tmp , edge[i].val -= tmp , edge[i ^ 1].val += tmp;
			if(!flow)	break;
		}
		return ret;
	}
	
	inline void main()
	{
		t = read();
		while(t --)
		{
			memset(head , 0 , sizeof(head)) , tot = 1;
			n = read();
			for(int i = 1 ; i <= n ; ++ i)
				for(int j = 1 ; j <= n ; ++ j)
					if(read())	add_edge(i , n + j , 1);
			for(int i = 1 ; i <= n ; ++ i)
				add_edge(0 , i , 1) , add_edge(n + i , 2 * n + 1 , 1);
			int ans = 0;
			while(bfs())
				ans += dfs(0 , INF);
			if(ans == n)	puts("Yes");
			else puts("No");
		}
	}
}

int main()
{
	thecold::main();
	return 0;
}
