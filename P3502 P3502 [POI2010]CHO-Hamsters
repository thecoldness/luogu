#include <cstdio>
#include <cctype>
#include <algorithm>
#include <cstring>
#include <climits>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}

	const int Max_n = 205;
	const int Max_s = 1e5 + 5;

	char c[Max_n][Max_s];

	int n , m , nex[Max_n][Max_s];

	ll ans = LLONG_MAX;

	struct Matrix
	{
		ll h[Max_n][Max_n];

		inline ll *operator[] (const int a)
		{
			return h[a];
		}

		inline void clean()
		{
			memset(h , 0 , sizeof(h));
		}

		inline void inf()
		{
			memset(h , 0x3f3f , sizeof(h));
		}
	} dis , beg;

	Matrix operator * (Matrix a , Matrix b)
	{
		Matrix ret;
		ret.inf();
		for(int i = 1 ; i <= n ; ++ i)
			for(int j = 1 ; j <= n ; ++ j)
				for(int k = 1 ; k <= n ; ++ k)
					ret[i][j] = min(ret[i][j] , a[i][k] + b[k][j]);
		return ret;
	}

	Matrix operator ^ (Matrix a , int y)
	{
		Matrix ret;
		ret.inf();
		for(int i = 1 ; i <= n ; ++ i)
			ret[i][i] = 0;
		while(y)
		{
			if(y & 1)
				ret = ret * a;
			a = a * a , y >>= 1;
		}
		return ret;
	}

	inline void work_kmp()
	{
		for(int i = 1 ; i <= n ; ++ i)
		{
			int len = strlen(c[i] + 1) , j = 0;
			for(int k = 2 ; k <= len ; ++ k)
			{
				while(j && c[i][j + 1] != c[i][k])
					j = nex[i][j];
				if(c[i][j + 1] == c[i][k])
					++ j;
				nex[i][k] = j;
			}
		}

		for(int i = 1 ; i <= n ; ++ i)
			for(int j = 1 ; j <= n ; ++ j)
			{
				int l = 0 , lenj = strlen(c[j] + 1) , leni = strlen(c[i] + 1);
				if(i == j)
				{
					dis[i][j] = lenj - nex[i][lenj];
					continue;
				}
				for(int k = 1 ; k <= lenj ; ++ k)
				{
					while(l && c[i][l + 1] != c[j][k])
						l = nex[i][l];
					if(c[i][l + 1] == c[j][k])
						++ l;
					if(k == lenj)
						dis[j][i] = leni - l;
				}
			}
	}

	inline void main()
	{
		// freopen("data.in" , "r" , stdin);
		n = read() , m = read();
		for(int i = 1 ; i <= n ; ++ i)
			scanf("%s" , c[i] + 1);
		work_kmp();
		beg.inf();
		for(int i = 1 ; i <= n ; ++ i)
			beg[i][i] = strlen(c[i] + 1);
		beg = beg * (dis ^ (m - 1));
		for(int i = 1 ; i <= n ; ++ i)
			for(int j = 1 ; j <= n ; ++ j)
				ans = min(ans , beg[i][j]);
		printf("%lld\n" , ans);
	}
}

int main()
{
	thecold::main();
	return 0;
}
