#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
#include <queue>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}

	const int Max_n = 1e5 + 5;
	const int Max_m = 1e5 + 5;
	const int jzp = 1e9 + 7;

	struct node
	{
		int nex , to , val;
		node(int a , int b , int c)
		{
			nex = a , to = b , val = c;
		}
		node(){}
	}edge[Max_m * 2];

	int head[Max_n] , tot , cnt , n , m;
	int out[Max_n] , num , eval[Max_n];

	ll from[Max_n] , rev[Max_n] , lstdis = -100;

	struct God
	{
		int pre , lst , id , from , tim;
		God(int a , int b , int c , int d , int e)
		{
			pre = a , lst = b , id = c , from = d , tim = e;
		}
		God(){}
		bool operator < (const God &a)const
		{
			if(pre != a.pre)
				return pre > a.pre;
			if(lst != a.lst)
				return lst > a.lst;
			return tim > a.tim;
		}
	};

	priority_queue<God> zzz;

	inline void add_edge(const int x , const int y , const int z)
	{
		edge[ ++ tot] = node(head[x] , y , z) , head[x] = tot;
		edge[ ++ tot] = node(head[y] , x , z) , head[y] = tot;
	}

	bool vis[Max_n];

	bool wqqka;

	void dfs_ans(const int now)
	{
		if(now == n - 1)
		{
			out[ ++ num] = now;
			return;
		}
		dfs_ans(from[now]);
		out[ ++ num] = now;
		wqqka |= eval[now];
		if(wqqka)
			printf("%d" , eval[now]);
	}

	inline void main()
	{
		n = read() , m = read();
		for(int i = 1 ; i <= m ; ++ i)
		{
			int ui = read() , vi = read() , ti = read();
			add_edge(ui , vi , ti);
		}
		zzz.push(God(0 , 0 , n - 1 , n - 1 , 0));
		while(!zzz.empty())
		{
			ll de = (rev[zzz.top().pre] * 10 % jzp) + zzz.top().lst;
			int now = zzz.top().id , fr = zzz.top().from , lt = zzz.top().lst;
			int tim = zzz.top().tim;
			zzz.pop();
			if(vis[now])	continue;
			from[now] = fr , eval[now] = lt;
			vis[now] = true;
			cnt += (de != lstdis);
			lstdis = de , rev[cnt] = de;
			for(int i = head[now] ; i ; i = edge[i].nex)
			{
				int nex = edge[i].to;
				if(vis[nex])	continue;
				zzz.push(God(cnt , edge[i].val , nex , now , tim + 1));
			}
		}
		dfs_ans(0);
		if(!wqqka)	puts("0");
		else puts("");
		printf("%d\n" , num);
		for(int i = num ; i ; -- i)
			printf("%d " , out[i]);
	}
}

int main()
{
	// freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
