#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
using namespace std;

namespace thecold
{
	inline int read()
	{
		int res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}
	
	const int Max_n = 1e3 + 5;
	const int Max_d = 1e3 + 5;
	
	struct nodex
	{
		int mx[Max_n * 3] , tag[Max_n * 3];
		
		int query(const int l , const int r , const int ll , const int rr , const int tr)
		{
			if(ll > r || rr < l) return 0;
			if(l <= ll && rr <= r) return max(mx[tr] , tag[tr]);
			int mid = (ll + rr) >> 1 , ret;
			ret = max(query(l , r , ll , mid , tr * 2) , query(l , r , mid + 1 , rr , tr * 2 + 1));
			return max(ret , tag[tr]);
		}
		
		void change(const int l , const int r , const int ll , const int rr , const int tr , const int val)
		{
			if(ll > r || rr < l) return; mx[tr] = max(mx[tr] , val);
			if(l <= ll && rr <= r) return tag[tr] = max(tag[tr] , val) , void();
			int mid = (ll + rr) >> 1;
			change(l , r , ll , mid , tr * 2 , val) , change(l , r , mid + 1 , rr , tr * 2 + 1 , val);
		}
	};
	
	int d , s , n;
	
	struct nodey
	{
		nodex mx[Max_n << 2] , tag[Max_n << 2];
		int query(const int lx , const int rx , const int ll , const int rr , const int tr , const int ly , const int ry)
		{
			if(ll > rx || rr < lx) return 0;
			if(lx <= ll && rr <= rx)
				return max(mx[tr].query(ly , ry , 0 , s , 1) , tag[tr].query(ly , ry , 0 , s , 1));
			int mid = (ll + rr) >> 1 , ret;
			ret = max(query(lx , rx , ll , mid , tr * 2 , ly , ry) , query(lx , rx , mid + 1 , rr , tr * 2 + 1 , ly , ry));
			return max(ret , tag[tr].query(ly , ry , 0 , s , 1));
		}
		
		void change(const int lx , const int rx , const int ll , const int rr , const int tr , const int ly , const int ry , const int val)
		{
			if(ll > rx || rr < lx) return; mx[tr].change(ly , ry , 0 , s , 1 , val);
			if(lx <= ll && rr <= rx) return tag[tr].change(ly , ry , 0 , s , 1 , val);
			int mid = (ll + rr) >> 1;
			change(lx , rx , ll , mid , tr * 2 , ly , ry , val) , change(lx , rx , mid + 1 , rr , tr * 2 + 1 , ly , ry , val);
		}
	}tree;
	
	inline void main()
	{
		d = read() , s = read() , n = read();
		for(int i = 1 ; i <= n ; ++ i)
		{
			int di = read() , si = read() , wi = read() , xi = read() , yi = read() , ret;
			ret = tree.query(xi , xi + di - 1 , 0 , d , 1 , yi , yi + si - 1);
			tree.change(xi , xi + sacdi - 1 , 0 , d , 1 , yi , yi + si - 1 , ret + wi);
		}
		printf("%d\n" , tree.query(0 , d , 0 , d , 1 , 0 , s));
	}
}

int main()
{
	thecold::main();
	return 0;
}
