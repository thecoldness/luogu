#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cctype>
using namespace std;

namespace thecold
{
	typedef long long ll;
	
	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}
	
	const int Max_n = 1e5 + 5;
	
	struct Node
	{
		ll xi , yi;
		Node(int a , int b)
		{
			xi = a , yi = b;
		}
		Node(){}
		bool operator > (const Node &a)const
		{
			return yi * a.xi > a.yi * xi;
		}
		bool operator < (const Node &a)const
		{
			return yi * a.xi < a.yi * xi;
		}
	}w[Max_n];
	
	struct node
	{
		int l , r , len;
		Node maxn;
		node(int a , int b)
		{
			l = a , r = b , len = 0;
		}
		node(){}
	}tree[Max_n << 2];
	
	int n , m;
	
	void build(const int l , const int r , const int tr)
	{
		tree[tr] = node(l , r);
		if(l == r)
		{
			tree[tr].maxn = w[l];
			return;
		}
		int mid = (l + r) >> 1;
		build(l , mid , tr * 2);
		build(mid + 1 , r , tr * 2 + 1);
		tree[tr].maxn = max(tree[tr * 2].maxn , tree[tr * 2 + 1].maxn);//bug
	}
	
	int query(Node sym , const int tr)
	{
		int ll = tree[tr].l , rr = tree[tr].r;
		if(!(tree[tr].maxn > sym))	return 0;
		if(ll == rr)	return 1;
//		if(tree[tr * 2].maxn > sym)	return query(sym , tr * 2) + tree[tr * 2 + 1].len; bug
//		if(tree[tr * 2].maxn > sym)	return query(sym , tr * 2) + query(tree[tr * 2].maxn , tr * 2 + 1); TLE
		if(tree[tr * 2].maxn > sym)	return query(sym , tr * 2) + tree[tr].len - tree[tr * 2].len;
		else return query(sym , tr * 2 + 1);
	}

	void change(const int pos , const int tr)
	{
		int ll = tree[tr].l , rr = tree[tr].r;
		if(ll == rr)
		{
			tree[tr].maxn = w[pos] , tree[tr].len = 1;
			return;
		}
		int mid = (ll + rr) >> 1;
		if(mid >= pos)	change(pos , tr * 2);
		else change(pos , tr * 2 + 1);
		tree[tr].maxn = max(tree[tr * 2].maxn , tree[tr * 2 + 1].maxn);
		tree[tr].len = tree[tr * 2].len + query(tree[tr * 2].maxn , tr * 2 + 1);
	}
	
	inline void main()
	{
		n = read() , m = read();
		for(int i = 1 ; i <= n ; ++ i)
			w[i] = Node(i , 0);
		build(1 , n , 1);
		while(m --)
		{
			int wi = read() , qi = read();
			w[wi] = Node(wi , qi);
			change(wi , 1);
			printf("%d\n" , tree[1].len);
		}
	}
}
	
int main()
{
	thecold::main();
	return 0;
}
