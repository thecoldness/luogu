#include<cstdio>
#include<algorithm>
#include<cctype>
#include<cmath>
using namespace std;
typedef long long ll;
inline int read()
{
	int res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c  = getchar();
	}
	return flag ? -res : res;
}
const int Max_n = 1e5 + 5;
const int Max_m = 1e6 + 1e5;
int cnt[Max_m] , n , m , k , a[Max_n] , B , ansl = 1 , ansr;
ll real_ans[Max_m] , ret;
inline int getblock(int x)
{
	return (x - 1) / B + 1;
}
struct node{
	int l , r , id;
	node(int a , int b , int c)
	{
		l = a , r = b , id = c;
	}
	node(){}
}ans[Max_m];
inline bool cmp(node a , node b)
{
	if(getblock(a.l) == getblock(b.l))	return a.r > b.r;
	return getblock(a.l) < getblock(b.l);
}
inline void change(int l , int r)
{
	while(l < ansl)
	{
		ret += cnt[a[-- ansl] ^ k];
		++ cnt[a[ansl]];
	}
	while(l > ansl)
	{
		-- cnt[a[ansl]];
		ret -= cnt[a[ansl ++] ^ k];
	}
	while(r > ansr)
	{
		ret += cnt[a[++ ansr] ^ k];
		++ cnt[a[ansr]];
	}
	while(r < ansr)
	{
		-- cnt[a[ansr]];
		ret -= cnt[a[ansr --] ^ k];
	}
}
int main()
{
	n = read() , m = read() , k = read();
	B = sqrt(n);
	for(int i = 1 ; i <= n ; ++ i)
		a[i] = read();
	for(int i = 2 ; i <= n ; ++ i)
		a[i] ^= a[i - 1];
	for(int i = 1 ; i <= m ; ++ i)
	{
		int ui = read() , vi = read();
		ans[i] = node(ui - 1 , vi , i);
	}
	sort(ans + 1 , ans + m + 1 , cmp);
	for(int i = 1 ; i <= m ; ++ i)
	{
		change(ans[i].l , ans[i].r);
		real_ans[ans[i].id] = ret;
	}
	for(int i = 1 ; i <= m ; ++ i)
		printf("%lld\n" , real_ans[i]);
	return 0;
}
