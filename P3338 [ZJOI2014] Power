#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
#include <cmath>
using namespace std;

namespace thecold
{
	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}
	
	const int Max_n = 1e5 + 5;
	const double pi = acos(-1.0);
	
	struct complex
	{
		double s , x;
		complex(double a , double b)
		{
			s = a , x = b;
		}
		complex(){}
	}f[Max_n << 2] , g[Max_n << 2] , tmpf[Max_n << 2] , tmpg[Max_n << 2];

	complex operator + (complex a , complex b)
	{
		return complex(a.s + b.s , a.x + b.x);
	}
	
	complex operator - (complex a , complex b)
	{
		return complex(a.s - b.s , a.x - b.x);
	}
	
	complex operator * (complex a , complex b)
	{
		return complex(a.s * b.s - a.x * b.x , a.s * b.x + a.x * b.s);
	}
	
	int n , lim , len = 1 , rev[Max_n << 2];
	
	double ans[Max_n];
	
	inline void FFT(complex *w , const int opt)
	{
		for(int i = 1 ; i < len ; ++ i)
			if(rev[i] > i)	swap(w[i] , w[rev[i]]);
		for(int dep = 1 ; dep <= lim ; ++ dep)
		{
			complex base = complex(cos(2.0 * pi / (1 << dep)) , opt * sin(2.0 * pi / (1 << dep)));
			for(int i = 0 ; i < len ; i += 1 << dep)
			{
				complex q = complex(1 , 0);
				for(int j = 0 ; j < (1 << (dep - 1)) ; ++ j)
				{
					complex ui = w[i + j] , ti = q * w[i + j + (1 << (dep - 1))];
					w[i + j] = ui + ti , w[i + j + (1 << (dep - 1))] = ui - ti;
					q = q * base;
				}
			}
		}
		if(opt == -1)
			for(int i = 0 ; i < len ; ++ i)
				w[i].s /= len;
	}
	
	inline void main()
	{
		n = read();
		for(int i = 1 ; i <= n ; ++ i)
			scanf("%lf" , &tmpf[i].s);
		for(int i = 1 ; i <= n ; ++ i)
			tmpg[i].s = 1.0 / i / i;
		while(len < 2 * n)
			++ lim , len <<= 1;
		for(int i = 1 ; i <= len ; ++ i)
			rev[i] = (rev[i / 2] >> 1) | ((i & 1) << (lim - 1));
		memcpy(f , tmpf , sizeof(tmpf)) , memcpy(g , tmpg , sizeof(tmpg));
		FFT(f , 1) , FFT(g , 1);
		for(int i = 0 ; i < len ; ++ i)
			f[i] = f[i] * g[i];
		FFT(f , -1);
		for(int i = 1 ; i <= n ; ++ i)
			ans[i] = f[i].s;
		memcpy(f , tmpf , sizeof(tmpf)) , memcpy(g , tmpg , sizeof(tmpg));
		reverse(f + 1 , f + n + 1);
		FFT(f , 1) , FFT(g , 1);
		for(int i = 0 ; i <= len ; ++ i)
			f[i] = f[i] * g[i];
		FFT(f , -1);
		for(int i = 1 ; i <= n ; ++ i)
//			ans[i] -= f[i].s; bug
			ans[i] -= f[n - i + 1].s;
		for(int i = 1 ; i <= n ; ++ i)
			printf("%.3lf\n" , ans[i]);
	}
}

int main()
{
	thecold::main();
	return 0;
}
