#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
#include <vector>
using namespace std;

namespace thecold
{
	inline int read()
	{
		int res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}

	const int Max_n = 1e5 + 5;
	const int INF = 1e9;
	const double eps = 1e-6;

	int n , ql , qu , head[Max_n] , mx[Max_n];
	int tot , root , siz[Max_n] , beg;

	struct node
	{
		int nex , to , val;
		node(int a , int b , int c)
		{
			nex = a , to = b , val = c;
		}
		node(int a , int b)
		{
			nex = a , to = b;
		}
		node(){}
	}edge[Max_n << 1];

	typedef long long ll;

	inline void add_edge(const int x , const int y , const int z)
	{
		edge[ ++ tot] = node(head[x] , y , z) , head[x] = tot;
		edge[ ++ tot] = node(head[y] , x , z) , head[y] = tot;
	}

	bool vis[Max_n];

	void dfs_root(const int now , const int from , const int all)
	{
		siz[now] = 1 , mx[now] = 0;
		for(int i = head[now] ; i ; i = edge[i].nex)
		{
			int nex = edge[i].to; if(nex == from || vis[nex]) continue;
			dfs_root(nex , now , all) , siz[now] += siz[nex] , mx[now] = max(mx[now] , siz[nex]);
		}
		mx[now] = max(mx[now] , all - siz[now]);
		if(mx[now] < mx[root]) root = now;
	}

	struct Node
	{
		int dep , dot , val;
		Node(int a , int b , int c)
		{
			dep = a , dot = b , val = c;
		}
		Node(){}
		bool operator < (const Node &a)const
		{
			return dep < a.dep;
		}
	};

	vector<Node> v[Max_n];

	int dep[Max_n];

	inline void dfs_siz(const int now , const int from)
	{
		dep[now] = 1;
		for(int i = head[now] ; i ; i = edge[i].nex)
		{
			int nex = edge[i].to; if(nex == from || vis[nex]) continue;
			dfs_siz(nex , now); dep[now] = max(dep[now] , dep[nex] + 1);
			if(now == root) v[now].push_back(Node(dep[nex] , nex , edge[i].val));
		}
		sort(v[now].begin() , v[now].end());
	}

	vector<int> edf[Max_n];

	void solve(const int now , const int all , const int from)
	{
		root = 0; dfs_root(now , 0 , all) , vis[root] = true;
		if(from == 0) beg = root;
		else edf[from].push_back(root);
		dfs_siz(root , 0); int nowroot = root;
		for(int i = head[nowroot] ; i ; i = edge[i].nex)
		{
			int nex = edge[i].to; if(vis[nex]) continue;
			solve(nex , siz[nex] , nowroot);
		}
	}

	double delta , sig[Max_n] , tog[Max_n];

	void dfs_dis(const int now , const int from , const double val , const int dep)
	{
		sig[dep] = max(sig[dep] , val);
		for(int i = head[now] ; i ; i = edge[i].nex)
		{
			int nex = edge[i].to; if(nex == from || vis[nex]) continue;
			dfs_dis(nex , now , val + 1.0 * edge[i].val - delta , dep + 1);
		}
	}

	int q[Max_n] , hd , tail;

	bool dfs_tree(const int now)
	{
		vis[now] = true; int sz = v[now].size();
		for(int i = 1 ; i <= n ; ++ i)
			if(tog[i] != -INF) tog[i] = -INF;
			else break;
		int lst = 0;
		for(int i = 0 ; i < sz ; ++ i)
		{
			int nex = v[now][i].dot , dep = v[now][i].dep;
			for(int j = 1 ; j <= dep ; ++ j) sig[j] = -INF;
			dfs_dis(nex , now , 1.0 * v[now][i].val - delta , 1);
			hd = 1 , tail = 0;
			for(int j = min(qu , lst) ; j >= ql ; -- j)
			{
				// while(hd < tail && tog[q[tail]] <= tog[j]) -- tail;bug
				while(hd <= tail && tog[q[tail]] <= tog[j]) -- tail;
				q[ ++ tail] = j;
			}
			for(int j = 1 ; j <= dep ; ++ j)
			{
				// while(hd < tail && q[hd] > qu - j)  ++ hd; bug
				while(hd <= tail && q[hd] > qu - j)  ++ hd;
				int newpos = ql - j;
				if(newpos >= 0 && newpos <= lst)
				{
					// while(hd < tail && q[tail] <= tog[newpos]) -- tail; bug
					// while(hd < tail && tog[q[tail]] <= tog[newpos]) -- tail;bug
					while(hd <= tail && tog[q[tail]] <= tog[newpos]) -- tail;
					q[ ++ tail] = newpos;
				}
				if(hd <= tail && sig[j] + tog[q[hd]] >= -eps) return true;
			}
			lst = dep;
			for(int i = 1 ; i <= lst ; ++ i) tog[i] = max(tog[i] , sig[i]);
		}
		sz = edf[now].size();
		for(int i = 0 ; i < sz ; ++ i)
			if(dfs_tree(edf[now][i])) return true;
		return false;
	}

	inline void main()
	{
		n = read() , ql = read() , qu = read();
		ll all = 0;
		for(int i = 1 ; i < n ; ++ i)
		{
			int ui = read() , vi = read() , ti = read();
			add_edge(ui , vi , ti) , all += ti;
		}
		mx[0] = INF , solve(1 , n , 0);
		double ll = 0 , rr = all , ans = 0.0;
		for(int i = 1 ; i <= n ; ++ i) tog[i] = -INF;// bug
		while(rr - ll >= -eps)
		{
			double mid = (ll + rr) / 2.0; memset(vis , false , sizeof(vis));
			delta = mid;
			if(dfs_tree(beg)) ans = mid , ll = mid + eps;
			else rr = mid - eps;
		}
		printf("%.3lf" , ans);
	}
}

int main()
{
	// freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
/*
5 
2 4
2 1 5
3 1 3
4 2 4
5 2 3
ans = 4.500
4 
2 3
2 1 5
3 2 5
4 3 2
ans = 5.000
*/
