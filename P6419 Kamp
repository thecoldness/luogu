#include<cstdio>
#include<cctype>
#include<algorithm>
using namespace std;
#define int long long
inline int read()
{
	int res = 0;
	char c;
	bool flag = true;
	c = getchar();
	while(!isdigit(c))
	{
		if(c == '-')	flag = false;
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return flag ? res : -res;
}
inline void write(int x)
{
	if(x < 0)
	{
		putchar('-');
		x = -x;
	}
	if(x > 9)	write(x / 10);
	putchar('0' + x % 10);
}
const int Max_n = 5e5 + 5;
struct node{
	int nex , to , val;
	node(){}
	node(int a , int b , int c)
	{
		nex = a , to = b , val = c;
	}
}edge[Max_n * 2];
int n , k , head[Max_n] , tot , ui , vi , zi , fir , son[Max_n] , cot , beg , max_dis , tail , ans[Max_n];
int dis[Max_n];
bool tag[Max_n] , rem[Max_n] , dia[Max_n];
inline void add_edge(int x , int y , int z)
{
	edge[ ++ tot] = node(head[x] , y , z) , head[x] = tot;
	edge[ ++ tot] = node(head[y] , x , z) , head[y] = tot;
}
void dfs_tree(int now , int from)
{
	for(int i = head[now] ; i ; i = edge[i].nex)
	{
		int nex = edge[i].to;
		if(nex == from)	continue;
		dfs_tree(nex , now);
		if(son[nex])	cot += 2 * edge[i].val;
		son[now] += son[nex];
	}
	if(tag[now])	++ son[now];
	if(son[now])	rem[now] = true;
}
void dfs_dia(int now , int dis , int from)
{
	if(dis > max_dis)
		beg = now , max_dis = dis;
	for(int i = head[now] ; i ; i = edge[i].nex)
	{
		int nex = edge[i].to;
		if(nex == from || !rem[nex])	continue;
		dfs_dia(nex , dis + edge[i].val , now);
	}
}
bool dfs_find(int now , int from)
{
	if(now == tail)	return true;
	for(int i = head[now] ; i ; i = edge[i].nex)
	{
		int nex = edge[i].to;
		if(nex == from || !rem[nex])	continue;
		dis[nex] = dis[now] + edge[i].val;
		if(dfs_find(nex , now))	return dia[now] = true;
	}
	return false;
}
void dfs_vir(int now , int from)
{
	for(int i = head[now] ; i ; i = edge[i].nex)
	{
		int nex = edge[i].to;
		if(nex == from || !rem[nex] || dia[nex])	continue;
		dis[nex] = dis[now] + edge[i].val;
		dfs_vir(nex , now);
	}
}
void dfs_ans(int now , int from , int cost)
{
	for(int i = head[now] ; i ; i = edge[i].nex)
	{
		int nex = edge[i].to;
		if(rem[nex] || nex == from)	continue;
		ans[nex] = cost + edge[i].val;
		dfs_ans(nex , now , ans[nex]);
	} 
}
signed main()
{
	n = read() , k = read();
	for(int i = 1 ; i < n ; ++ i)
	{
		ui = read() , vi = read() , zi = read();
		add_edge(ui , vi , zi);
	}
	for(int i = 1 ; i <= k ; ++ i)
		fir = read() , tag[fir] = true;
	dfs_tree(fir , 0);
	dfs_dia(fir , 0 , 0);
	tail = beg;
	max_dis = 0;
	dfs_dia(tail , 0 , 0);
	dfs_find(beg , 0);
	dia[tail] = true;
	for(int i = 1 ; i <= n ; ++ i)
		if(dia[i])	
		{
			dis[i] = max(dis[i] , max_dis - dis[i]);
			dfs_vir(i , 0);
		}
	for(int i = 1 ; i <= n ; ++ i)
		if(rem[i])	ans[i] = cot - dis[i];
	for(int i = 1 ; i <= n ; ++ i)
		if(rem[i])	dfs_ans(i , 0 , ans[i]);
	for(int i = 1 ; i <= n ; ++ i)
		write(ans[i]) , putchar('\n');
	return 0;
}
