#include<cstdio>
#include<cctype>
#include<algorithm>
#include<stack>
#include<cstring>
#include<climits>
using namespace std;
inline int read()
{
	int res = 0;
	char c;
	bool flag = true;
	c = getchar();
	while(!isdigit(c))
	{
		if(c == '-')	flag = false;
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return flag ? res : -res;
}
const int Max_n = 1e3 + 5;
struct node{
	int to , nex;
	node(int a , int b)
	{
		to = a , nex = b;
	}
	node(){}
}edge[Max_n * 2];
int n , m , head[Max_n] , dfn[Max_n] , w[Max_n] , tim , low[Max_n] , bel[Max_n] , f[Max_n][Max_n] , maxn[Max_n][Max_n];
int u , v , head_rev[Max_n] , tot_edge , tot , ans , c;
inline void add_edge(int x , int y)
{
	edge[ ++ tot_edge] = node(y , head[x]) , head[x] = tot_edge;
}
stack<int> st;
bool vis[Max_n];
inline void tarjan(int now)
{
	dfn[now] = low[now] = ++ tim;
	vis[now] = true;
	st.push(now);
	for(int i = head[now] ; i ; i = edge[i].nex)
	{
		int nex = edge[i].to;
		if(!dfn[nex])
		{
			tarjan(nex);
			low[now] = min(low[now] , low[nex]);
		}
		else if(vis[nex])	low[now] = min(low[now] , dfn[nex]);
	}
	if(dfn[now] == low[now])
	{
		++ tot;
		while(st.top() != now)
		{
			bel[st.top()] = tot;
			vis[st.top()] = false;
			st.pop();
		}
		bel[now] = tot;
		vis[now] = false;
		st.pop();
	}
}
int main()
{
//	freopen("time.in" , "r" , stdin);
//	freopen("time.out" , "w" , stdout);
	n = read() , m = read() , c = read();
	for(int i = 1 ; i <= n ; ++ i)
		w[i] = read();
	for(int i = 1 ; i <= m ; ++ i)
	{
		u = read() , v = read();
		add_edge(u , v);
	}
	tarjan(1);
	for(int i = 1 ; i <= n ; ++ i)
		for(int j = 0 ; j <= 1000 ; ++ j)
			maxn[i][j] = -3e5;
	f[1][0] = 0;
	for(int i = head[1] ; i ; i = edge[i].nex)
		maxn[edge[i].to][0] = 0;
	for(int j = 1 ; j <= 1000 ; ++ j)
		for(int i = 1 ; i <= n ; ++ i)
		{
			if(bel[i] != bel[1])	continue;
			f[i][j] = maxn[i][j - 1] + w[i] - c * (2 * j - 1);
			for(int k = head[i] ; k ; k = edge[k].nex)
				if(bel[edge[k].to] == bel[1])	maxn[edge[k].to][j] = max(maxn[edge[k].to][j] , f[i][j]);
		}
	for(int i = 0 ; i <= 1000 ; ++ i)
		ans = max(ans , f[1][i]);
	printf("%d" , ans);
	return 0;
}
