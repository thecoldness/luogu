#include<cstdio>
#include<cctype>
#include<algorithm>
using namespace std;
inline int read()
{
	int res = 0;
	char c;
	bool flag = true;
	c = getchar();
	while(!isdigit(c))
	{
		if(c == '-')	flag = false;
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return flag ? res : -res;
}
const int Max_n = 1e5 + 5;
const double eps = 1e-6;
int n , s;
double A[Max_n] , B[Max_n] , rate[Max_n] , f[Max_n] , q[Max_n] , ans;
inline double K(int x)
{
	return - A[x] / B[x];
}
inline double Y(int x)
{
	return f[x] / (B[x] + rate[x] * A[x]);
}
inline double X(int x)
{
	return Y(x) * rate[x];
}
struct vec{
	double x , y;
	vec(double a , double b)
	{
		x = a , y = b;
	}
	vec(){}
	vec(int a)
	{
		x = X(a) , y = Y(a);
	}
};
vec operator - (vec a , vec b)
{
	return vec(b.x - a.x , b.y - a.y);
}
inline double cross(vec a , vec b)
{
	return a.x * b.y - a.y * b.x;
}
struct node{
	int id;
	double k;
	node(int a , double b)
	{
		id = a , k = b;
	}
	node(){}
}que[Max_n] , convex[Max_n];
inline bool cmp(node a , node b)
{
	return a.k > b.k;
}
inline bool cmp2(node a , node b)
{
	return a.k < b.k;
}
inline void cdq(int l , int r)
{
	if(l == r)	
	{
		f[l] = max(f[l] , f[l - 1]);
		return;
	}
	int mid = (l + r) >> 1;
	cdq(l , mid);
	int top = 0;
	int head = 1 , tail = 0;
	for(int i = l ; i <= mid ; ++ i)
		convex[ ++ top] = node(i , X(i));
	sort(convex + 1 , convex + top + 1 , cmp2);
	for(int i = 1 ; i <= top ; ++ i)
	{
		while(head < tail && cross(vec(q[tail - 1]) - vec(q[tail]) , vec(q[tail]) - vec(convex[i].id)) >= 0)	-- tail;
		q[ ++ tail] = convex[i].id;
	}
	top = 0;
	for(int i = mid + 1 ; i <= r ; ++ i)
		que[ ++ top] = node(i , K(i));
	sort(que + 1 , que + top + 1 , cmp);
	for(int i = 1 ; i <= top ; ++ i)
	{
		int now = que[i].id;
		while(head < tail && cross(vec(q[head]) - vec(q[head + 1]) , vec(1.0 , que[i].k)) <= 0)	++ head;
		f[now] = max(f[now] , B[now] * (Y(q[head]) - K(now) * X(q[head])));
	}
	cdq(mid + 1 , r);
}
int main()
{
	n = read() , s = read();
	f[1] = (double)s;
	for(int i = 1 ; i <= n ; ++ i)
		scanf("%lf %lf %lf" , A + i , B + i , rate + i);
	cdq(1 , n);
	for(int i = 1 ; i <= n ; ++ i)
		ans = max(ans , f[i]);
	printf("%.3lf" , ans);
	return 0;
}
