#include<cstdio>
#include<cctype>
#include<algorithm>
using namespace std;
typedef long long ll;
const int Max_n = 2e3 + 5;
const int Max_h = 1e5 + 5;
const int MOD = 1e9 + 7;
inline int read()
{
	int res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}
ll f[Max_n] , jc[Max_h * 2];
int n , h , w;
struct node{
	int x , y;
	node(int a , int b)
	{
		x = a , y = b;
	}
	node(){}
}dot[Max_n];
inline int quickpow(ll x , int y)
{
	ll ret = 1;
	while(y)
	{
		if(y & 1)	ret *= x , ret %= MOD;
		x *= x , x %= MOD;
		y >>= 1;
	}
	return ret;
}
inline int ni(ll x)
{
	return quickpow(x , MOD - 2);
}
inline bool cmp(node a , node b)
{
	if(a.x == b.x)	return a.y < b.y;
	return a.x < b.x;
}
inline int C(int n , int m)
{
	return jc[n] * ni(jc[n - m] * jc[m] % MOD) % MOD;
}
int main()
{
	h = read() , w = read() , n = read();
	for(int i = 1 ; i <= n ; ++ i)
	{
		int ui = read() , vi = read();
		dot[i] = node(ui , vi);
	}
	dot[++ n] = node(h , w);
	sort(dot + 1 , dot + n + 1 , cmp);
	jc[0] = 1;
	for(int i = 1 ; i <= 2e5 ; ++ i)
		jc[i] = jc[i - 1] * i % MOD;
	for(int i = 1 ; i <= n ; ++ i)
	{
		int nowx = dot[i].x , nowy = dot[i].y;
		f[i] = C(nowx + nowy - 2 , nowx - 1);
		for(int j = 1 ; j < i ; ++ j)
			if(dot[j].x <= nowx && dot[j].y <= nowy)
				f[i] -= f[j] * C(nowx - dot[j].x + nowy - dot[j].y , nowx - dot[j].x) , f[i] %= MOD;
	}
	printf("%lld" , (f[n] + MOD) % MOD);
	return 0;
}
