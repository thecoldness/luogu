#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
using namespace std;

namespace thecold
{
	typedef long long ll;
	
	inline int read()
	{
		int res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}
	
	const int jzp = 998244353;
	const int Max_m = 1e4 + 5;
	
	int f[Max_m][15] , n , k , m;
	
	inline int quickpow(ll x , ll y)
	{
		ll ret = 1;
		while(y)
		{
			if(y & 1) ret = ret * x % jzp;
			x = x * x % jzp , y >>= 1;
		}
		return ret;
	}
	
	inline int add(const int x , const int y)
	{
		int ret = x + y;
		if(ret >= jzp) ret -= jzp;
		return ret;
	}
	
	inline int ni(const int x)
	{
		return quickpow(x , jzp - 2);
	}
	
	inline void main()
	{
		n = read() , k = read() , m = read();
		f[0][0] = 1 , k = n - k + 1;
		for(int i = 1 ; i <= n ; ++ i)
		{
			int pi = read();
			for(int j = m ; j >= pi ; -- j)
//				for(int l = k ; l >= 0 ; -- l)bug
				for(int l = k ; l ; -- l) 
					f[j][l] = add(f[j][l] , jzp - add(f[j - pi][l] , jzp - f[j - pi][l - 1]));
		}
		int ans = 0;
		for(int i = 1 ; i <= m ; ++ i)
			ans = add(ans , 1ll * f[i][k] * ni(i) % jzp);
		ans = 1ll * ans * m % jzp;
		printf("%d\n" , ans);
	}
}

int main()
{
	thecold::main();
	return 0;
}
