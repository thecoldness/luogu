#include <cstdio>
#include <cctype>
#include <algorithm>
#include <cstring>
using namespace std;
typedef long long ll;
inline int read()
{
	int res  =0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}
const int Max_n = 1e5 + 5;
const int MOD = 1e9 + 7;
int n , m , g;
ll jc[Max_n * 2] , ans;
inline int quickpow(ll x , int y)
{
	ll ret = 1;
	while(y)
	{
		if(y & 1)	ret *= x , ret %= MOD;
		x *= x , x %= MOD;
		y >>= 1;
	}
	return ret;
}
inline int ni(ll x)
{
	return quickpow(x , MOD - 2);
}
inline int C(int n , int m)
{
	if(m > n)	return 0;
	return jc[n] * ni(jc[m] * jc[n - m] % MOD) % MOD;
}
int main()
{
	n = read() , m = read() , g = read();
	jc[0] = 1;
	for(int i = 1 ; i <= n + m ; ++ i)
		jc[i] = jc[i - 1] * i % MOD;
	if(n == 0)
	{
		if(m == 1)	printf("%d" , (g == 1));
		else	printf("%d" , (g == 0));
		return 0;
	}
	if(m == 0)
	{
		printf("%d" , (g == (n + 1) % 2));
		return 0;
	}
	int beg = (g == 0 ? 1 : 2);
	for(int i = beg ; i <= n ; i += 2)
		ans += C(n + m - i , m - 1) , ans %= MOD;
	if(m != 1 && (n + 1) % 2 != g)	++ ans;
	if(m == 1 && ((n % 2) ^ 1) == g) 	++ ans;
	printf("%lld" , ans);
	return 0;
}
