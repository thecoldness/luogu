#include <cstring>
#include <cctype>
#include <algorithm>
#include <cstdio>
using namespace std;

namespace thecold
{
	typedef long long ll;
	
	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}
	
	const int Max_n = 1e5 + 5;
	const int jzp = 998244353;
	const int G = 3;
	const int inv3 = (jzp + 1) / 3;
	
	inline ll quickpow(ll x , ll y)
	{
		ll ret = 1;
		while(y)
		{
			if(y & 1)	ret = ret * x % jzp;
			x = x * x % jzp , y >>= 1;
		}
		return ret;
	}
	
	int len , lim , rev[Max_n << 2];
	
	inline void prepare(const int lenth)
	{
		len = 1 , lim = 0;
		while(len <= lenth) ++ lim , len <<= 1;
		for(int i = 1 ; i < len ; ++ i)
			rev[i] = (rev[i >> 1] >> 1) | ((i & 1) << (lim - 1));
	}
	
	inline int add(const int x , const int y)
	{
		int ret = x + y;
		if(ret >= jzp)
			ret -= jzp;
		return ret;
	}
	
	inline void NTT(ll *w , const int opt)
	{
		for(int i = 1 ; i < len ; ++ i)
			if(rev[i] > i)	swap(w[i] , w[rev[i]]);
		for(int dep = 1 ; dep <= lim ; ++ dep)
		{
			ll base = quickpow(opt == 1 ? G : inv3 , (jzp - 1) / (1 << dep));
//			for(int i = 0 ; i < len ; i += (1 << dep)); bug
			for(int i = 0 ; i < len ; i += (1 << dep))
			{
				ll q = 1;
				for(int j = 0 ; j < 1 << (dep - 1) ; ++ j)
				{
					int ui = w[i + j] , vi = q * w[i + j + (1 << (dep - 1))] % jzp;
					w[i + j] = add(ui , vi) , w[i + j + (1 << (dep - 1))] = add(ui , - vi + jzp);
					q = q * base % jzp;
				}
			}
		}
		if(opt == -1)
		{
			int inv = quickpow(len , jzp - 2);
			for(int i = 0 ; i < len ; ++ i)
				w[i] = w[i] * inv % jzp;
		}
	}

	inline int ni(const int x)
	{
		return quickpow(x , jzp - 2);
	}
	
	int n , inv[Max_n << 2];
	
	ll a[Max_n << 2] , b[Max_n << 2] , ans[Max_n << 2] , f[Max_n << 2] , g[Max_n << 2];
	ll dao[Max_n << 2] , ud[Max_n << 2] , tmpf[Max_n << 2] , tmpg[Max_n << 2];
	
	inline void get_dao(const int mod , ll *w , ll *q)
	{
		for(int i = 1 ; i < mod ; ++ i)
			q[i - 1] = w[i] * i % jzp;
		q[len - 1] = 0;
	}
	
	inline void get_jifen(const int mod , ll *w , ll *q)
	{
		q[0] = 0;
		for(int i = 0 ; i < mod - 1 ; ++ i)
			q[i + 1] = w[i] * inv[i + 1] % jzp;
	}
	
	void solve_inv(const int mod , ll *w , ll *q)
	{
		if(mod == 1) {q[0] = ni(w[0]); return;}
		int mid = (mod + 1) / 2;
		solve_inv(mid , w , q);
		for(int i = 0 ; i < mod ; ++ i)
			tmpf[i] = w[i] , tmpg[i] = q[i];
//		prepare(mod); bug
		prepare(mod * 2);
//		NTT(tmpf , 1) , NTT(tmpq , 1); bug
		NTT(tmpf , 1) , NTT(tmpg , 1);
		for(int i = 0 ; i < len ; ++ i)
			tmpf[i] = tmpg[i] * add(2 , (jzp - tmpf[i]) * tmpg[i] % jzp) % jzp;
		NTT(tmpf , -1);
		for(int i = 0 ; i < mod ; ++ i)
			q[i] = tmpf[i];
		for(int i = 0 ; i < len ; ++ i)
			tmpf[i] = tmpg[i] = 0;
	}
	
	void solve_ln(const int mod , ll *w , ll *q)
	{
		get_dao(mod , w , dao);
		solve_inv(mod , w , ud);
//		prepare(mod); bug
		prepare(mod * 2); 
		NTT(dao , 1) , NTT(ud , 1);
		for(int i = 0 ; i < len ; ++ i)
			dao[i] = dao[i] * ud[i] % jzp;
		NTT(dao , -1);
		get_jifen(mod , dao , q);
		for(int i = 0 ; i < len ; ++ i)
			dao[i] = ud[i] = 0;
	}
	
	void solve_exp(const int mod , ll *w , ll * q)
	{
		if(mod == 1) {q[0] = 1; return;}
		int mid = (mod + 1) / 2;
		solve_exp(mid , w , q); 
		memcpy(g , q , sizeof(g));
//		solve_ln(mid , g , f); bug!!!
		solve_ln(mod , q , f);
		for(int i = 0 ; i < mod ; ++ i)
			f[i] = add(jzp - f[i] , w[i]);
		f[0] = add(f[0] , 1);
		prepare(mod * 2);
		NTT(g , 1) , NTT(f , 1);
		for(int i = 0 ; i < len ; ++ i)
			f[i] = f[i] * g[i] % jzp;
		NTT(f , -1);
		for(int i = 0 ; i < mod ; ++ i)
			q[i] = f[i];
		for(int i = 0 ; i < len ; ++ i)
			f[i] = g[i] = 0;
	}
	
	inline void main()
	{
		n = read();
		for(int i = 0 ; i < n ; ++ i)
			a[i] = read();
		prepare(n * 2);
		for(int i = 1 ; i < len ; ++ i)
			inv[i] = ni(i);
		solve_exp(n , a , ans);
		for(int i = 0 ; i < n ; ++ i)
			printf("%lld " , ans[i]);
	}
}

int main()
{
	thecold::main();
	return 0;
}
/*
4
0 6 0 0
*/
