#include<cstdio>
#include<algorithm>
#include<cctype>
using namespace std;
#define int long long
inline int read()
{
	int res = 0;
	char c;
	bool flag = true;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c != '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return flag ? res : -res;
}
void write(int x)
{
	if(x < 0)
	{
		putchar('-');
		x = -x;
	}
	if(x > 9)	write(x / 10);
	putchar('0' + x % 10);
}
const int Max_n = 2e5 + 5;
struct node{
	int nex , to , val;
	node(int a , int b , int c)
	{
		nex = a , to = b,  val = c;
	}
	node(){}
}edge[Max_n * 2];
int n , dis[Max_n] , fa[Max_n][25] , tot , pot[Max_n]  , head[Max_n] , t;
inline void add_edge(int x , int y , int z)
{
	edge[ ++ tot] = node(head[x] , y , z) , head[x] = tot;
	edge[ ++ tot] = node(head[y] , x , z) , head[y] = tot;
}
void dfs(int now , int from)
{
	fa[now][0] = from;
	for(int i = 1 ; i <= 20 ; ++ i)
		fa[now][i] = fa[fa[now][i - 1]][i - 1];
	for(int i = head[now] ; i ; i = edge[i].nex)
	{
		int nex = edge[i].to;
		if(nex == from)	continue;
		dis[nex] = dis[now] + edge[i].val;
		dfs(nex , now);
	}
}
inline void check(int now)
{
	int copx = now;
	for(int i = 20 ; i >= 0 ; -- i)
		if(fa[now][i] && dis[copx] - dis[fa[now][i]] <= t)	now = fa[now][i];
	-- pot[fa[now][0]];
}
void dfs_ans(int now , int from)
{
	for(int i = head[now] ; i ; i = edge[i].nex)
	{
		int nex = edge[i].to;
		if(nex == from)	continue;
		dfs_ans(nex , now);
		pot[now] += pot[nex];
	}
}
signed main()
{
	int logm[Max_n];
	n = read() , t = read();
	logm[1] = 0;
	for(int i = 2 ; i <= n ; ++ i)
		logm[i] = logm[i / 2] + 1;
	for(int i = 2 ; i <= n ; ++ i)
	{
		int ui , vi;
		ui = read() , vi = read();
		add_edge(i , ui , vi);
	}
	dfs(1 , 0);
	for(int i = 1 ; i <= n ; ++ i)
		check(i);
	for(int i = 1 ; i <= n ; ++ i)
		++ pot[i];
	dfs_ans(1 , 0);
	for(int i = 1 ; i <= n ; ++ i)
	{
		write(pot[i]);
		putchar('\n');
	}
	return 0;
}
