#include <cstdio>
#include <algorithm>

namespace Maker {

typedef unsigned int uit;

bool __sp;
uit __x, __y, __z;
int __type, __k, __m;

const int L = 1 << 21;
char buf[L], *front=buf, *end=buf;
char GetChar() {
  if (front == end) {
    end = buf + fread(front = buf, 1, L, stdin);
    if (front == end) return -1;
  }
  return *(front++);
}

template <typename T>
inline void qr(T &x) {
  char ch = GetChar(), lst = ' ';
  while ((ch > '9') || (ch < '0')) lst = ch, ch = GetChar();
  while ((ch >= '0') && (ch <= '9')) x = (x << 1) + (x << 3) + (ch ^ 48), ch = GetChar();
  if (lst == '-') x = -x;
}

template <typename T>
inline void Begin(const T &x) {
  __type = x % 10;
  qr(__x); qr(__y); qr(__z); qr(__m);
  __sp = (__type == 3) || (__type == 4); __type &= 1;
}

inline uit __Next_Integer() {
  __x ^= __y << (__z & 31);
  __y ^= __z >> (__x & 31);
  __z ^= __x << (__y & 31);
  __x ^= __x >> 5; __y ^= __y << 13; __z ^= __z >> 6;
  return __x;
}

inline uit Rand() { return __Next_Integer(); }

template <typename Tx, typename Ty, typename Tz>
inline void Get_Nextline(Tx &x, Ty &y, Tz &z) {
  if (__m) {
    --__m;
    x = 0; y = 0; z = 0;
    qr(x); qr(y); qr(z);
    if (x == 0) ++__k;
  } else {
    x = Rand() & 1; y = Rand() & 1;
    if (__k == 0) { x = 0; }
    if (x == 0) {
      ++__k;
      if (__sp) {
        z = __type;
      } else {
        z = Rand() & 1;
      }
    } else {
      int dk = __k >> 1;
      if (dk == 0) {
        z = 1;
      } else {
        z = Rand() % dk + dk;
      }
    }
  }
}

}

const int Max_n = 1e7 + 10;

int n , l[Max_n << 1] , r[Max_n << 1] , head , tail;
int ans1 , ans2 , ans3 , ans4 , q[Max_n << 1];

namespace thecold
{
    inline void main()
    {
        scanf("%d", &n); head = tail = n + 5 , -- tail;
        Maker::Begin(n);
        for (int x, y, z , opt = 1 ; opt <= n; ++ opt) 
        {
            Maker::Get_Nextline(x, y, z);// printf("opt%d: %d %d %d\n" , opt , x , y ,z);
            // if(x == 1 && y == 1) exit(-1);
            if(x == 0)
            {
                if(y == 0)
                {
                    if(z == 0)
                    {
                        q[ -- head] = 0 , l[head] = r[head] = 1;
                        for(int i = head + 1 ; q[i] && i <= tail ; ++ i)    l[i] = l[i - 1] + 1;
                    }
                    // else    q[ -- head] = 1 , r[head] = (r[head + 1] ? r[head] + 1 : 0); bug
                  else q[ -- head] = 1 , r[head] = (r[head + 1] ? r[head + 1] + 1 : 0);
                }
                else
                {
                    if(z == 0)
                    {
                        q[ ++ tail] = 0 , l[tail] = r[tail] = 1;
                        for(int i = tail - 1 ; q[i] && i >= head ; -- i) r[i] = r[i + 1] + 1;
                    }
                    else    q[ ++ tail] = 1 , l[tail] = (l[tail - 1] ? l[tail - 1] + 1 : 0);
                }
            }
            else
            {
                int ans = -1;
                if(y == 0)
                {
                    z += head - 1;
                    if(z == head) ans = q[head] ^ 1;
                    else
                    {
                        if(l[z]) 
                        {
                            if(l[z] == 1) ans = 0;
                            else if(z - l[z] + 1 == head)ans = l[z] & 1;
                            else ans = (l[z] & 1) ^ 1;
                        }
                        else ans = (z - head + 2) & 1;
                    }
                }
                else
                {
                    z = tail - z + 1;
                    if(z == tail) ans = q[tail] ^ 1;
                    else
                    {
                        if(r[z]) 
                        {
                            if(r[z] == 1) ans = 0;
                            else if(z + r[z] - 1 == tail) ans = r[z] & 1;
                            else ans = (r[z] & 1) ^ 1;
                        }
                        else ans = (tail - z + 2) & 1;
                    }
                }
                ans ^= 1; //printf("%d\n" , ans);
                if(ans == 1) ++ ans1;
                if((opt & 1) && !ans) ++ ans2;
                if(!(opt & 1) && ans) ++ ans3;
                if(opt % 1024 == 0 && !ans) ++ ans4;
            }
        }
        printf("%d %d %d %d\n" , ans1 , ans2 , ans3 , ans4);
    }
}

int main() 
{
    // freopen("data.in" , "r" , stdin);
    thecold::main();
    return 0;
} 
/*
9
510 96510 696510 0

10
9577 2147 9270 0
*/
