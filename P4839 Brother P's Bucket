#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cctype>
// #define int long long
using namespace std;

namespace thecold
{
	inline int read()
	{
		int res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}

	const int Max_n = 5e4 + 5;
	const int Max_s = 35;

	struct node
	{
		int l , r , base[Max_s];

		int& operator[] (const int a)
		{
			return base[a];
		}

		inline void insert(int x)
		{
			for(int i = 31 ; i >= 0 ; -- i)
				if(x & (1 << i))
				{
					if(!base[i]) {base[i] = x; break;}
					x ^= base[i];
				}
		}

		inline void ins(node a)
		{
			for(int i = 0 ; i <= 31 ; ++ i)
				if(a[i]) insert(a[i]);
		}

		inline void clear()
		{
			memset(base , 0 , sizeof(base));
		}

	}tree[Max_n << 2] , ans;

	int n , m;

	inline void change(const int l , const int r , const int pos , const int val , const int tr)
	{
		tree[tr].insert(val); if(l == r) return;
		int mid = (l + r) >> 1;
		if(mid >= pos) change(l , mid , pos , val , tr * 2);
		else change(mid + 1 , r , pos , val , tr * 2 + 1);
	}

	void build(const int l , const int r , const int tr)
	{
		tree[tr].l = l , tree[tr].r = r; if(l == r) return;
		int mid = (l + r) >> 1;
		build(l , mid , tr * 2) , build(mid + 1 , r , tr * 2 + 1);
	}

	void query(const int l , const int r , const int tr)
	{
		int ll = tree[tr].l , rr = tree[tr].r;
		if(ll > r || rr < l) return;
		if(l <= ll && rr <= r) return ans.ins(tree[tr]);
		query(l , r , tr * 2) , query(l , r , tr * 2 + 1);
	}

	inline void main()
	{
		n = read() , m = read();
		build(1 , m , 1);
		while(n --)
		{
			int opt = read() , li = read() , ri = read();
			if(opt == 1)	change(1 , m , li , ri , 1);
			else
			{
				ans.clear();
				query(li , ri , 1);
				int ret = 0;
				for(int i = 31 ; i >= 0 ; -- i) ret = max(ret , ret ^ ans[i]);
				printf("%d\n" , ret);
			}
		}
	}
}

signed main()
{
	// freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
