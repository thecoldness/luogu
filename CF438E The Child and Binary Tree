#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cctype>
#include <vector>
#include <cassert>
using namespace std;

namespace thecold
{
	inline int read()
	{
		int res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}

	typedef long long ll;
	typedef vector<int> vec;

	const int Max_n = 1e5 + 5;
	const int G = 3; const int jzp = 998244353;
	const int Gi = (jzp + 1) / 3;

	int rev[Max_n << 2] , len , lim;

	inline void prepare(const int lenth)
	{
		lim = 0 , len = 1;
		while(len <= lenth) len <<= 1 , ++ lim;
		for(int i = 1 ; i < len ; ++ i)
			rev[i] = (rev[i >> 1] >> 1) | ((i & 1) << (lim - 1));
	}

	inline int add(const int x , const int y)
	{
		int ret = x + y;
		if(ret >= jzp) ret -= jzp;
		return ret;
	}

	int n , m , c[Max_n] , cnt = 1e5 , inv2;

	inline int quickpow(ll x , ll y)
	{
		ll ret = 1;
		while(y)
		{
			if(y & 1) ret = ret * x % jzp;
			x = x * x % jzp , y >>= 1;
		}
		return ret;
	}

	inline void NTT(vec &w , const int opt)
	{
		for(int i = 1 ; i < len ; ++ i) if(rev[i] > i) swap(w[rev[i]] , w[i]);
		for(int dep = 1 ; dep <= lim ; ++ dep)
		{
			// int base = quickpow(opt == 1 ? G : Gi , (jzp - 1) / (1 << (dep - 1)));bug
			int base = quickpow(opt == 1 ? G : Gi , (jzp - 1) / (1 << dep));
			for(int i = 0 ; i < len ; i += 1 << dep)
			{
				int q = 1;
				for(int j = 0 ; j < 1 << (dep - 1) ; ++ j)
				{
					int ui = w[i + j] , vi = 1ll * q * w[i + j + (1 << (dep - 1))] % jzp;
					w[i + j] = add(ui , vi) , w[i + j + (1 << (dep - 1))] = add(ui , jzp - vi);
					q = 1ll * q * base % jzp;
				}
			}
		}
		if(opt == -1)
		{
			int inv = quickpow(len , jzp - 2);
			for(int i = 0 ; i < len ; ++ i) w[i] = 1ll * w[i] * inv % jzp;
		}
	}

	inline void solve_ni(const int mod , vec w , vec &q)
	{
		if(mod == 1) return q[0] = quickpow(w[0] , jzp - 2) , void();
		int mid = (mod + 1) >> 1;
		solve_ni(mid , w , q);
		vec f , g; f.resize(0) , g.resize(0);
		prepare(2 * mod); f.resize(len) , g.resize(len) , q.resize(len);
		// for(int i = 0 ; i < len ; ++ i) f[i] = w[i] , g[i] = q[i]; bug
		f.clear() , g.clear();
		for(int i = 0 ; i < mod ; ++ i) f[i] = w[i];
		for(int i = 0 ; i < mid ; ++ i) g[i] = q[i];
		// puts("((("); printf("%d %d\n" , mod , mid);
		// for(int i = 0 ; i < mod ; ++ i) printf("%d " , g[i]);
		// puts("");
		// for(int i = 0 ; i < mod ; ++ i) printf("%d " , g[i]);
		// puts(")))");
		NTT(f , 1) , NTT(g , 1);
		for(int i = 0 ; i < len ; ++ i) f[i] = 1ll * g[i] * add(2 , jzp - 1ll * f[i] * g[i] % jzp) % jzp;
		NTT(f , -1); for(int i = 0 ; i < mod ; ++ i) q[i] = f[i];
	}

	inline void solve_sqrt(const int mod , vec w , vec &q)
	{
		if(mod == 1) return q[0] = 1 , void();
		int mid = (mod + 1) >> 1;
		solve_sqrt(mid , w , q);
		for(int i = mid ; i < mod ; ++ i) assert(q[i] == 0);
		vec f , ni , g; f.resize(0) , ni.resize(1) , g.resize(0);
		// for(int i = 0 ; i < mid ; ++ i) ni[i] = q[i];
		solve_ni(mod , q , ni);
		prepare(mod * 2) , f.resize(len) , ni.resize(len) , g.resize(len);
		// for(int i = 0 ; i < len ; ++ i) f[i] = w[i] , g[i] = q[i];bug
		f.clear();
		for(int i = 0 ; i < mod ; ++ i) f[i] = w[i];// , g[i] = q[i];
		NTT(f , 1) , NTT(ni , 1);
		for(int i = 0 ; i < len ; ++ i) f[i] = 1ll * f[i] * ni[i] % jzp;
		NTT(f , -1); for(int i = 0 ; i < mod ; ++ i) q[i] = 1ll * add(f[i] , q[i]) * inv2 % jzp;
	}

	inline void main()
	{
		inv2 = quickpow(2 , jzp - 2) , n = read() , m = read(); prepare(2e5);
		vec g , ans; g.resize(0); g.resize(len) , g[0] = 1;
		for(int i = 1 ; i <= n ; ++ i) g[read()] = jzp - 4;
		ans.resize(len); solve_sqrt(cnt + 1 , g , ans);
		// puts("qwq");
		ans[0] = add(ans[0] , 1); solve_ni(cnt + 1 , ans , ans);
		for(int i = 1 ; i <= m ; ++ i) ans[i] = 2ll * ans[i] % jzp;
		for(int i = 1 ; i <= m ; ++ i) printf("%d\n" , ans[i]);
	}
}

int main()
{
	// freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
