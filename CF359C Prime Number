#include <cstdio>
#include <algorithm>
#include <cctype>
using namespace std;
typedef long long ll;
const int MOD = 1e9 + 7;
inline int read()
{
	int res  =0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}
inline int quickpow(int x , ll y)
{
	ll ret = 1 , base = x;
	while(y)
	{
		if(y & 1)	ret *= base , ret %= MOD;
		base *= base , base %= MOD;
		y >>= 1;
	}
	return ret;
}
const int Max_n = 1e5 + 5;
int n , x;
ll sum , st[Max_n] , a[Max_n] , tp;
inline bool cmp(ll a , ll b)
{
	return a > b;
}
int main()
{
	tp = n = read() , x = read();
	for(int i = 1 ; i <= n ; ++ i)
		a[i] = read() , sum += a[i];
	for(int i = 1 ; i <= n ; ++ i)
		st[i] = sum - a[i];
	sort(st + 1 , st + n + 1 , cmp);
	while(true)
	{
		int cnt = 0;
		ll sta = st[tp];
		if(sta >= sum)
		{
			printf("%d" , quickpow(x , sum));
			return 0;
		}
		while(sta == st[tp] && tp)
			++ cnt , -- tp;
		if(cnt % x)
		{
			printf("%d" , quickpow(x , sta));
			return 0;
		}
		cnt /= x;
		for(int i = 1 ; i <= cnt ; ++ i)
			st[ ++ tp] = sta + 1;
	}
	return 0;
}
