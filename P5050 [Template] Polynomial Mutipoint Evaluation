#include <cstdio>
#include <cctype>
#include <algorithm>
#include <cstring>
#include <vector>
using namespace std;

namespace thecold
{
	typedef long long ll;
	typedef vector<int> vec;
	
	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}
	
	const int Max_n = 7e5 + 5;
	const int jzp = 998244353;
	const int G = 3;
	
	int rev[Max_n << 2] , lim , len;
	
	inline void prepare(const int x)
	{
		len = 1 , lim = 0;
		while(len <= x)	++ lim , len <<= 1;
		for(int i = 1 ; i < len ; ++ i)
			rev[i] = (rev[i >> 1] >> 1) | ((i & 1) << (lim - 1));
	}
	
	int n , m , sol[Max_n] , copm;

	vec a , b , ni , g[Max_n << 2] , ans[Max_n << 2] , tmpf , tmpg;

	inline int quickpow(ll x , ll y)
	{
		ll ret = 1;
		while(y)
		{
			if(y & 1)	ret = ret * x % jzp;
			x = x * x % jzp , y >>= 1;
		}
		return ret;
	}

	inline int add(const int x , const int y)
	{
		int ret = x + y;
		if(ret >= jzp)	ret -= jzp;
		return ret;
	}

	inline void NTT(vec &w , const int opt)
	{
		w.resize(len);
		for(int i = 1 ; i < len ; ++ i)
			if(rev[i] > i)	swap(w[i] , w[rev[i]]);
		for(int dep = 1 ; dep <= lim ; ++ dep)
		{
			int base = quickpow(opt == 1 ? G : (jzp + 1) / G , (jzp - 1) / (1 << dep));
			for(int i = 0 ; i < len ; i += 1 << dep)
			{
				ll q = 1;
				for(int j = 0 ; j < (1 << (dep - 1)) ; ++ j)
				{
					int ui = w[i + j] , vi = 1ll * q * w[i + j + (1 << (dep - 1))] % jzp;
					w[i + j] = add(ui , vi) , w[i + j + (1 << (dep - 1))] = add(ui , jzp - vi);
					q = q * base % jzp;
				}
			}
		}
		if(opt == -1)
		{
			int inv = quickpow(len , jzp - 2);
			for(int i = 0 ; i < len ; ++ i)
				w[i] = 1ll * w[i] * inv % jzp;
		}
	}
	
	void build(const int l , const int r , const int tr)
	{
		int lenth = r - l + 1;// g[tr].resize(lenth + 2); bug
		if(l == r)
		{
			g[tr].resize(2);
			g[tr][0] = 1 , g[tr][1] = jzp - b[l];
			return;
		}
		int mid = (l + r) >> 1;
		build(l , mid , tr * 2) , build(mid + 1 , r , tr * 2 + 1);
		prepare(lenth);
		g[tr].resize(len);
		NTT(g[tr * 2] , 1) , NTT(g[tr * 2 + 1] , 1);
//		for(int i = 0 ; i < lenth ; ++ i) bug
		for(int i = 0 ; i < len ; ++ i)
			g[tr][i] = 1ll * g[tr * 2][i] * g[tr * 2 + 1][i] % jzp;
		NTT(g[tr] , -1);
	}

	inline void solve_ni(const int mod , vec &w , vec &q)
	{
		if(mod == 1) {q[0] = quickpow(w[0] , jzp - 2); return;}
		int mid = (mod + 1) >> 1;
		solve_ni(mid , w , q);
		for(int i = 0 ; i < mod ; ++ i)
			tmpf[i] = w[i] , tmpg[i] = q[i];
		prepare(mod * 2 - 1);
		NTT(tmpf , 1) , NTT(tmpg , 1);
		for(int i = 0 ; i < len ; ++ i)
			tmpf[i] = 1ll * tmpg[i] * add(2 , jzp - 1ll * tmpf[i] * tmpg[i] % jzp) % jzp;
		NTT(tmpf , -1);
		for(int i = 0 ; i < mod ; ++ i)
			q[i] = tmpf[i];
		for(int i = 0 ; i < len ; ++ i)
			tmpf[i] = tmpg[i] = 0;
	}

	inline vec mulT(vec w , vec q , const int mod)
	{
//		w.resize(mod + 2) , q.resize(mod + 2);
//		prepare(mod); bug
		prepare(q.size() - 1);// question !!!!!!!!
//		NTT(w , 1) , NTT(q , 1); bug
		for(int i = 0 ; i < len ; ++ i)
			w[i] = 1ll * w[i] * q[i] % jzp;
//		NTT(w , -1); bug
		NTT(w , 1);
		return vec(&w[0] , &w[mod]);
	}
	
	void resolve(const int l , const int r , vec w , const int tr)
	{
		if(l == r) {sol[l] = w[0]; return;}
		int mid = (l + r) >> 1;
//		prepare(r - l + 2); bug
		prepare(r - l + 1);// question !!!!!!!!!!
		NTT(w , -1);
		resolve(l , mid , mulT(w , g[tr * 2 + 1] , mid - l + 2) , tr * 2);
		resolve(mid + 1 , r , mulT(w , g[tr * 2] , r - mid + 1) , tr * 2 + 1);
	}

	inline void main()
	{
//		n = read() , copm = m = read(); bug 
		n = read() + 1 , copm = m = read();
		a.resize(max(n , m) + 5) , b.resize(max(n , m) + 5);
		for(int i = 0 ; i < n ; ++ i)
			a[i] = read();
		for(int i = 0 ; i < m ; ++ i)
			b[i] = read();
		n = max(n , m);
		build(0 , n - 1 , 1);
		ni.resize(n + 5) , tmpf.resize(n + 5) , tmpg.resize(n + 5);
		solve_ni(n , g[1] , ni);
//		prepare(n * 2); bug
		prepare(n * 2 - 1);
//		NTT(a , -1) , NTT(g[1] , 1); bug
		NTT(a , -1) , NTT(ni , 1);
//		resolve(0 , n - 1 , mulT(a , g[1] , n) , 1);bug
		resolve(0 , n - 1 , mulT(a , ni , n) , 1); 
		for(int i = 0 ; i < copm ; ++ i)
			printf("%d\n" , sol[i]);
	}
}

int main()
{
//	freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
