#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
#include <queue>
using namespace std;

namespace thecold
{
	typedef long long ll;
	
	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}
	
	const int Max_n = 2e5 + 5;
	
	int head[Max_n * 10] , tot , n , q , s , root_in , root_out;
	int num , son[Max_n << 3][2] , rev_in[Max_n] , rev_out[Max_n];
	
	struct node
	{
		int nex , to , val;
		node(int a , int b , int c)
		{
			nex = a , to = b , val = c;
		}
		node(){}
	}edge[Max_n * 20];
	
	inline void add_edge(const int x , const int y , const int z)
	{
		edge[ ++ tot] = node(head[x] , y , z);
		head[x] = tot;
	}
	
	void build_in(const int l , const int r , int &tr)
	{
		tr = ++ num;
		if(l == r){rev_in[l] = tr; return;}
		int mid = (l + r) >> 1;
		build_in(l , mid , son[tr][0]) , build_in(mid + 1 , r , son[tr][1]);
		add_edge(son[tr][0] , tr , 0) , add_edge(son[tr][1] , tr , 0);
	}
	
	void build_out(const int l , const int r , int &tr)
	{
		tr = ++ num;
		if(l == r){rev_out[l] = tr; return;}
		int mid = (l + r) >> 1;
		build_out(l , mid , son[tr][0]) , build_out(mid + 1 , r , son[tr][1]);
		add_edge(tr , son[tr][0] , 0) , add_edge(tr , son[tr][1] , 0);
	}
	
	void add_out(const int l , const int r , const int ll , const int rr , const int from , const int tr)
	{
		if(ll > r || rr < l)	return;
		if(l <= ll && rr <= r)
		{
			add_edge(from , tr , 0);
			return;
		}
		int mid = (ll + rr) >> 1;
		add_out(l , r , ll , mid , from , son[tr][0]);
		add_out(l , r , mid + 1 , rr , from , son[tr][1]);
	}
	
	void add_in(const int l , const int r , const int ll , const int rr , const int to , const int tr)
	{
		if(ll > r || rr < l)	return;
		if(l <= ll && rr <= r)
		{
			add_edge(tr , to , 0);
			return;
		}
		int mid = (ll + rr) >> 1;
		add_in(l , r , ll , mid , to , son[tr][0]);
		add_in(l , r , mid + 1 , rr , to , son[tr][1]);
	}
	
	bool vis[Max_n * 9];
	
	ll dis[Max_n * 9];
	
	struct God
	{
		int id;
		ll val;
		God(int a , ll b)
		{
			id = a , val = b;
		}
		God(){}
		bool operator < (const God &a)const
		{
			return val > a.val;
		}
	};
	
	priority_queue<God> zzz;
	
	inline void shorest_path()
	{
		memset(dis , 0x3f , sizeof(dis));
		dis[rev_in[s]] = 0;
		zzz.push(God(rev_in[s] , dis[rev_in[s]]));
		while(!zzz.empty())
		{
			int now = zzz.top().id;zzz.pop();
			if(vis[now])	continue;
			vis[now] = true;
			for(int i = head[now] ; i ; i = edge[i].nex)
			{
				int nex = edge[i].to;
				if(dis[nex] > dis[now] + edge[i].val)
				{
					dis[nex] = dis[now] + edge[i].val;
					zzz.push(God(nex , dis[nex]));
				}
			}
		}
	}
	
	inline void main()
	{
		n = read() , q = read() , s = read();
		build_in(1 , n , root_in);
		build_out(1 , n , root_out);
		for(int i = 1 ; i <= n ; ++ i)
			add_edge(rev_in[i] , rev_out[i] , 0) , add_edge(rev_out[i] , rev_in[i] , 0);
		for(int i = 1 ; i <= q ; ++ i)
		{
			int type = read();
			if(type == 1)
			{
				int wi = read() , qi = read() , ni = read();
				add_edge(rev_in[wi] , rev_out[qi] , ni);
				continue;
			}
			int wi = read() , qi = read() , ni = read() , mi = read();
			if(type == 2)
			{
				++ num;	add_edge(rev_in[wi] , num , mi);
				add_out(qi , ni , 1 , n , num , root_out);
			}
			if(type == 3)
			{
				++ num; add_edge(num , rev_out[wi] , mi);
				add_in(qi , ni , 1 , n , num , root_in);
			}
		}
		shorest_path();
		for(int i = 1 ; i <= n ; ++ i)
			if(dis[rev_out[i]] == (ll)0x3f3f3f3f3f3f3f3f)
				printf("-1 ");
			else printf("%lld " , dis[rev_out[i]]);
	}
}

int main()
{
	thecold::main();
	return 0;
}
