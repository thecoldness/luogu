#include <cstdio>
#include <cctype>
#include <cstring>
#include <algorithm>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}

	const int Max_n = 1e6 + 5;

	int a[Max_n] , n , m;
	struct node
	{
		int di , si , ti;
		node(int a , int b , int c)
		{
			di = a , si = b , ti = c;
		}
		node() {}
	} bill[Max_n];

	ll dif[Max_n] , tmp[Max_n];

	inline bool check(const int ed)
	{
		memcpy(tmp , dif , sizeof(tmp));
		for(int i = 1 ; i <= ed ; ++ i)
		{
			int l = bill[i].si , r = bill[i].ti , mon = bill[i].di;
			tmp[l] -= mon , tmp[r + 1] += mon;
		}
		ll ret = 0;
		for(int i = 1 ; i <= n ; ++ i)
		{
			ret += tmp[i];
			if(ret < 0)
				return false;
		}
		return true;
	}

	void main()
	{
		n = read() , m = read();
		for(int i = 1 ; i <= n ; ++ i)
			a[i] = read() , dif[i] = a[i] - a[i - 1];
		for(int i = 1 ; i <= m ; ++ i)
		{
			int ui = read() , vi = read() , ti = read();
			bill[i] = node(ui , vi , ti);
		}
		int ans = 0 , l = 0 , r = m;
		while(l <= r)
		{
			int mid = (l + r) >> 1;
			if(check(mid))
				ans = mid , l = mid + 1;
			else r = mid - 1;
		}
		if(ans == m)
			printf("0");
		else printf("-1\n%d" , ans + 1);
	}
}

int main()
{
	thecold::main();
	return 0;
}
