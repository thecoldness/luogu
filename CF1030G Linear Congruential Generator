#include <cstdio>
#include <cctype>
#include <algorithm>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline int read()
	{
		int res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}

	const int Max_n = 2e5 + 5; 
	const int jzp = 1e9 + 7;
	const int Max_d = 2e6 + 5;

	int n , a[Max_n] , mindiv[Max_d] , prime[Max_d], tot;
	int m , mx[Max_d] , ans = 1 , apr[Max_d] , cnt[Max_d];

	inline void prepare()
	{
		const int n = 2e6;
		for(int i = 2 ; i <= n ; ++ i)
		{
			if(!mindiv[i]) mindiv[i] = i , prime[ ++ tot] = i;
			for(int j = 1 ; j <= tot && prime[j] * i <= n ; ++ j)
			{
				mindiv[i * prime[j]] = prime[j];
				// if(i % prime[j]) break; bug
				if(i % prime[j] == 0) break;
			}
		}
	}

	inline int quickpow(ll x , ll y)
	{
		ll ret = 1;
		while(y)
		{
			if(y & 1) ret = ret * x % jzp;
			x = x * x % jzp , y >>= 1;
		}
		return ret;
	}

	inline int check(const int x , const int flag)
	{
		if(!flag) return cnt[x] != 1;
		int tmp = x , ret = 1;
		while(tmp != 1)
		{
			// int md = mindiv[x] , cnt = 0; printf("%d %d\n" , md , tmp); bug
			int md = mindiv[tmp] , cnt = 0;
			while(tmp % md == 0) tmp /= md , ++ cnt;
			if(mx[md] == cnt && apr[md] == 1) ret = 0;
		}
		return ret;
	}

	inline void main()
	{
		n = read() , prepare();
		for(int i = 1 ; i <= n ; ++ i) a[i] = read() , ++ cnt[a[i]];
		sort(a + 1 , a + n + 1) , reverse(a + 1 , a + n + 1);
		for(int i = 1 ; i <= n ; ++ i)
		{
			bool hav = false; int tmp = a[i];
			while(tmp != 1)
			{
				int md = mindiv[tmp] , cnt = 0;
				while(tmp % md == 0) tmp /= md , ++ cnt;
				// if(cnt == mx[md]) ++ apr[md]; bug
				if(mx[md] < cnt) hav = true , mx[md] = cnt , apr[md] = 1;
			}
			if(!hav)
			{
				tmp = a[i] - 1; //printf("%d\n" , tmp);
				if(tmp == 1) m = 1;
				while(tmp != 1)
				{
					int md = mindiv[tmp] , cnt = 0;
					while(tmp % md == 0) tmp /= md , ++ cnt;
					// if(a[i] - 1 == 18) printf("%d %d\n" , md , cnt);
					if(cnt == mx[md]) ++ apr[md];
					if(mx[md] < cnt) hav = true , mx[md] = cnt , apr[md] = 1;
				}
			}
		}
		for(int i = 1 ; i <= 2e6 ; ++ i) ans = 1ll * ans * quickpow(i , mx[i]) % jzp;
		// for(int i = 1 ; i <= 2e6 ; ++ i) if(apr[i]) printf("%d %d %d\n" , i , mx[i] , apr[i]);
		for(int i = 1 ; i <= n ; ++ i) 
			// m = (check(a[i]) && check(a[i] - 1)); bug
			m |= (check(a[i] , 0) && check(a[i] - 1 , 1));// , printf("%d %d %d\n" , a[i] , check(a[i]) , check(a[i] - 1));
		printf("%d\n" , (ans + m) % jzp);
	}
}

int main()
{
	// freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
/*
6
19 29 43 19 29 43
6
19 23 13 29 11 23 
ans = 18122390
*/
