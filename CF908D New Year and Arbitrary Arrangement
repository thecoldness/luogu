#include <cstdio>
#include <cctype>
#include <algorithm>
#include <cstring>
using namespace std;

typedef long long ll;

inline int read()
{
	int res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}

ll n , k , pa , pb , nb;

const int MOD = 1e9 + 7;
const int Max_k = 1e3 + 5;

ll f[Max_k][Max_k * 2];

inline int quickpow(ll x , int y)
{
	ll ret = 1;
	while(y)
	{
		if(y & 1)	ret *= x , ret %= MOD;
		x *= x , x %= MOD;
		y >>= 1;
	}
	return ret;
}

inline int ni(const int x)
{
	return quickpow(x , MOD - 2);
}

inline ll dfs(const int x , const int y)
{
	if(y >= k)
		return y;
	if(x + y >= k)
		return (x + y + (pa * nb) % MOD) % MOD;
	if(f[x][y])	return f[x][y];
	f[x][y] = (pa * n % MOD) * dfs(x + 1 , y) % MOD;
	f[x][y] += (pb * n % MOD) * dfs(x , x + y) % MOD;
	return f[x][y] %= MOD;
}

int main()
{
	k = read() , pa = read() , pb = read();
	n = ni(pa + pb) , nb = ni(pb);
	printf("%lld\n" , (dfs(1 , 0) + MOD) % MOD);
	return 0;
}
