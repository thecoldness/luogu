#include <cstdio>
#include <cctype>
#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <random>
#include <chrono>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline int read()
	{
		int res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}

	int n , jzp , a , base , T;

	struct complex
	{
		ll s , x;
		complex(ll a , ll b)
		{
			s = a , x = b;
		}
		complex(){}
	};

	inline int add(const int x , const int y)
	{
		int ret = x + y;
		if(ret >= jzp) ret -= jzp;
		return ret;
	}

	complex operator * (complex a , complex b)
	{
		// return complex(add(a.s * b.s % jzp , a.x * b.x % jzp * base % jzp) , add(a.s * b.x , a.x * b.s));bug
		return complex(add(a.s * b.s % jzp , a.x * b.x % jzp * base % jzp) , add(a.s * b.x % jzp , a.x * b.s % jzp));
	}

	complex operator ^ (complex x , int y)
	{
		complex ret = complex(1 , 0);
		while(y)
		{
			if(y & 1) ret = ret * x;
			x = x * x , y >>= 1;
		}
		return ret;
	}

	inline int quickpow(ll x , ll y)
	{
		ll ret = 1;
		while(y)
		{
			if(y & 1) ret = ret * x % jzp;
			x = x * x % jzp , y >>= 1;
		}
		return ret;
	}

	bool find;

	mt19937 rnd;

	inline int getr(const int l , const int r)
	{
		uniform_int_distribution<int> dis(l , r);
		return dis(rnd);
	}

	inline void main()
	{
		rnd.seed(std::chrono::steady_clock::now().time_since_epoch().count());
		T = read();
		while(T --)
		{
			n = read() , jzp = read() , find = false , n %= jzp;
			if(n == 0) {puts("0"); continue;}
			if(quickpow(n , (jzp - 1) >> 1) != 1) {puts("Hola!"); continue;}
			while(true)
			{
				a = getr(1 , jzp - 1) , base = add(1ll * a * a % jzp , jzp - n);
				if(quickpow(base , (jzp - 1) >> 1) != 1) break;
			}
			complex ret = complex(a , 1) ^ ((jzp + 1) >> 1);
			int ans1 = ret.s , ans2 = jzp - ans1;
			if(ans1 > ans2) swap(ans1 , ans2);
			printf("%d %d\n" , ans1 , ans2);
		}
	}
}

int main()
{
	thecold::main();
	return 0;
}
