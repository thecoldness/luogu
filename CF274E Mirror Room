#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
#include <set>
#include <map>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}

	const int Max_n = 1e5 + 5;

	int rev[10] = {0 , 3 , 4 , 1 , 2} , cnt;
	int n , m , k , beg , bx , by , base;

	char dec[10];

	struct Node
	{
		int xi , yi , dic;
		Node(int a , int b , int c)
		{
			xi = a , yi = b , dic = c;
		}
		Node(){}
		bool operator < (const Node &a)const
		{
			if(xi != a.xi)
				return xi < a.xi;
			if(yi != a.yi)
				return yi < a.yi;
			return dic < a.dic;
		}
	};

	set<Node> mp;

	struct node
	{
		int xi , yi;
		node(int a , int b)
		{
			xi = a , yi = b;
		}
		node(){}
		bool operator < (const node &a)const
		{
			if(xi != a.xi)
				return xi < a.xi;
			return yi < a.yi;
		}
	};

	set<node> s[Max_n << 2] , blo;

	typedef set<node>::iterator iter;

	ll ans;

	inline void add(const int x , const int y)
	{
		s[x + y].insert(node(x , y));
		s[x - y + base].insert(node(x , y));
		blo.insert(node(x , y));
	}

	inline bool fin(const int x , const int y)
	{
		return blo.find(node(x , y)) != blo.end();
	}

	void dfs(const int nowx , const int nowy , const int dic)
	{
		if(mp.find(Node(nowx , nowy , dic)) != mp.end())
			return;
		mp.insert(Node(nowx , nowy , dic));
		if(dic == 1)
		{			
			int cla = nowx + nowy;
			s[cla].insert(node(nowx , nowy));
			iter it = s[cla].find(node(nowx , nowy));
			++ it;
			int nexx = (*it).xi , nexy = (*it).yi;
			-- nexx , ++ nexy;
			ans += nexx - nowx + 1;
			-- it;
			s[cla].erase(it);
			if(fin(nexx + 1 , nexy) && fin(nexx , nexy - 1))
				++ cnt , dfs(nexx , nexy , rev[1]);
			else if(fin(nexx + 1 , nexy))
				dfs(nexx , nexy - 1 , 4);
			else if(fin(nexx , nexy - 1))
				dfs(nexx + 1 , nexy , 2);
			else ++ cnt , dfs(nexx , nexy , rev[1]);
			return;
		}
		if(dic == 2)
		{
			int cla = nowx - nowy + base;
			s[cla].insert(node(nowx , nowy));
			iter it = s[cla].find(node(nowx , nowy));
			++ it;
			int nexx = (*it).xi , nexy = (*it).yi;
			-- nexx , -- nexy;
			ans += nexx - nowx + 1;
			-- it;
			s[cla].erase(it);
			if(fin(nexx , nexy + 1) && fin(nexx + 1 , nexy))
				++ cnt , dfs(nexx , nexy , rev[2]);
			else if(fin(nexx , nexy + 1))
				dfs(nexx + 1 , nexy , 1);
			else if(fin(nexx + 1 , nexy))
				dfs(nexx , nexy + 1 , 3);
			else  ++ cnt , dfs(nexx , nexy , rev[2]);
			return;
		}
		if(dic == 3)
		{
			int cla = nowx + nowy;
			s[cla].insert(node(nowx , nowy));
			iter it = s[cla].find(node(nowx , nowy));
			-- it;
			int nexx = (*it).xi , nexy = (*it).yi;
			++ nexx , -- nexy;
			ans += nowx - nexx + 1;
			++ it;
			s[cla].erase(it);
			if(fin(nexx , nexy + 1) && fin(nexx - 1 , nexy))
				++ cnt , dfs(nexx , nexy , rev[3]);
			else if(fin(nexx , nexy + 1))
				dfs(nexx - 1 , nexy , 4);
			else if(fin(nexx - 1 , nexy))
				dfs(nexx , nexy + 1 , 2);
			else	++ cnt , dfs(nexx , nexy , rev[3]);
			return;
		}
		if(dic == 4)
		{
			int cla = nowx - nowy + base;
			s[cla].insert(node(nowx , nowy));
			iter it = s[cla].find(node(nowx , nowy));
			-- it;
			int nexx = (*it).xi , nexy = (*it).yi;
			++ nexx , ++ nexy;
			ans += nowx - nexx + 1;
			++ it;
			s[cla].erase(it);
			if(fin(nexx , nexy - 1) && fin(nexx - 1 , nexy))
				++ cnt , dfs(nexx , nexy , rev[4]);
			else if(fin(nexx , nexy - 1))
				dfs(nexx - 1 , nexy , 3);
			else if(fin(nexx - 1 , nexy))
				dfs(nexx , nexy - 1 , 1);
			else	++ cnt , dfs(nexx , nexy , rev[4]);
			return;
		}
	}

	inline void check(const int nowx , const int nowy , const int dic)
	{
		if(dic == 1)
		{			
			int cla = nowx + nowy;
			s[cla].insert(node(nowx , nowy));
			iter it = s[cla].find(node(nowx , nowy));
			++ it;
			int nexx = (*it).xi , nexy = (*it).yi;
			-- nexx , ++ nexy;
			-- it;
			s[cla].erase(it);
			if(fin(nexx + 1 , nexy) && fin(nexx , nexy - 1))
				++ cnt , dfs(nexx , nexy , rev[1]);
			else if(fin(nexx + 1 , nexy))
				dfs(nexx , nexy - 1 , 4);
			else if(fin(nexx , nexy - 1))
				dfs(nexx + 1 , nexy , 2);
			else ++ cnt , dfs(nexx , nexy , rev[1]);
			return;
		}
		if(dic == 2)
		{
			int cla = nowx - nowy + base;
			s[cla].insert(node(nowx , nowy));
			iter it = s[cla].find(node(nowx , nowy));
			++ it;
			int nexx = (*it).xi , nexy = (*it).yi;
			-- nexx , -- nexy;
			-- it;
			s[cla].erase(it);
			if(fin(nexx , nexy + 1) && fin(nexx + 1 , nexy))
				++ cnt , dfs(nexx , nexy , rev[2]);
			else if(fin(nexx , nexy + 1))
				dfs(nexx + 1 , nexy , 1);
			else if(fin(nexx + 1 , nexy))
				dfs(nexx , nexy + 1 , 3);
			else  ++ cnt , dfs(nexx , nexy , rev[2]);
			return;
		}
		if(dic == 3)
		{
			int cla = nowx + nowy;
			s[cla].insert(node(nowx , nowy));
			iter it = s[cla].find(node(nowx , nowy));
			-- it;
			int nexx = (*it).xi , nexy = (*it).yi;
			++ nexx , -- nexy;
			++ it;
			s[cla].erase(it);
			if(fin(nexx , nexy + 1) && fin(nexx - 1 , nexy))
				++ cnt , dfs(nexx , nexy , rev[3]);
			else if(fin(nexx , nexy + 1))
				dfs(nexx - 1 , nexy , 4);
			else if(fin(nexx - 1 , nexy))
				dfs(nexx , nexy + 1 , 2);
			else	++ cnt , dfs(nexx , nexy , rev[3]);
			return;
		}
		if(dic == 4)
		{
			int cla = nowx - nowy + base;
			s[cla].insert(node(nowx , nowy));
			iter it = s[cla].find(node(nowx , nowy));
			-- it;
			int nexx = (*it).xi , nexy = (*it).yi;
			++ nexx , ++ nexy;
			++ it;
			s[cla].erase(it);
			if(fin(nexx , nexy - 1) && fin(nexx - 1 , nexy))
				++ cnt , dfs(nexx , nexy , rev[4]);
			else if(fin(nexx , nexy - 1))
				dfs(nexx - 1 , nexy , 3);
			else if(fin(nexx - 1 , nexy))
				dfs(nexx , nexy - 1 , 1);
			else	++ cnt , dfs(nexx , nexy , rev[4]);
			return;
		}
	}

	inline void main()
	{
		n = read() , m = read() , k = read();
		base = n + 2 * m + 4;
		for(int i = 1 ; i <= k ; ++ i)
		{
			int ui = read() , vi = read();
			add(ui , vi);
		}
		for(int i = 0 ; i <= n + 1 ; ++ i)
			add(i , 0) , add(i , m + 1);
		for(int i = 0 ; i <= m + 1 ; ++ i)
			add(0 , i) , add(n + 1 , i);
		bx = read() , by = read();
		scanf("%s" , dec + 1);
		if(dec[1] == 'N')
		{
			if(dec[2] == 'E')
				beg = 1;
			else beg = 4;
		}
		else
		{
			if(dec[2] == 'E')
				beg = 2; 
			else beg = 3 ;
		}
		check(bx , by , beg);
		if(cnt)	ans /= 2;
		printf("%lld\n" , ans);
	} 
}

int main()
{
	// freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
/*
5 4 2
3 4
4 3
1 1 SW

5

*/
