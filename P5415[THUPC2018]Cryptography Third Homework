#include <cstdio>
#include <algorithm>
#include <cctype>
using namespace std;
typedef long long ll;
typedef __int128 lll;
inline ll read()
{
	ll res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}
ll t , c1 , c2 , e1 , e2 , N , ansx , ansy;
void exgcd(ll tmpa , ll tmpb)
{
	if(!tmpb)
	{
		ansx = 1 , ansy = 0;
		return;
	}
	exgcd(tmpb , tmpa % tmpb);
	ll lastx = ansx , lasty = ansy;
	ansx = lasty , ansy = lastx - tmpa / tmpb * lasty;
}
inline ll quickpow(ll x , ll y , ll MOD)
{
	ll ret = 1;
	while(y)
	{
		if(y & 1)	ret = (lll)ret * x % MOD;
		x = (lll) x * x % MOD;
		y >>= 1;
	}
	return ret;
}
void write(ll x)
{
	if(x > 9)	write(x / 10);
	putchar('0' + x % 10);
}
int main()
{
	t = read();
	while(t --)
	{
		c1 = read() , c2 = read() , e1 = read() , e2 = read() , N = read();
		exgcd(e1 , e2);
		ll ret = 0 , x = ansx , y = ansy;
		if(x < 0)	exgcd(c1 , N) , ret = quickpow(ansx , -x , N);
		else ret = quickpow(c1 , x , N);
		if(y < 0)	exgcd(c2 , N) , ret = (lll) ret * quickpow(ansx , -y , N) % N;
		else ret = (lll)ret * quickpow(c2 , y , N) % N;
		ret = (ret + N) % N;
		write(ret);
		putchar('\n');
	}
	return 0;
}
